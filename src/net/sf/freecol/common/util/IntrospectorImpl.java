// generated by Introspector::main
package net.sf.freecol.common.util;
class IntrospectorImpl {
static final java.util.Map<String,Introspector.Impl<?>> names = new java.util.HashMap<>();
static {
names.put("common.networking.SetGoodsLevelsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetGoodsLevelsMessage.class) {
net.sf.freecol.common.networking.SetGoodsLevelsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.ExportData.class))
    return new net.sf.freecol.common.networking.SetGoodsLevelsMessage((net.sf.freecol.common.model.Colony)params[0], (net.sf.freecol.common.model.ExportData)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetGoodsLevelsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.HighScoresMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.HighScoresMessage.class) {
net.sf.freecol.common.networking.HighScoresMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, java.util.List.class))
    return new net.sf.freecol.common.networking.HighScoresMessage((java.lang.String)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.HighScoresMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.UpdateMapGeneratorOptionsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.class) {
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.option.OptionGroup.class))
    return new net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage((net.sf.freecol.common.option.OptionGroup)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.EmigrateUnitMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.EmigrateUnitMessage.class) {
net.sf.freecol.common.networking.EmigrateUnitMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, int.class))
    return new net.sf.freecol.common.networking.EmigrateUnitMessage((int)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EmigrateUnitMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.MissionaryMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.MissionaryMessage.class) {
net.sf.freecol.common.networking.MissionaryMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class, boolean.class))
    return new net.sf.freecol.common.networking.MissionaryMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1], (boolean)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MissionaryMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.FirstContactMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.FirstContactMessage.class) {
net.sf.freecol.common.networking.FirstContactMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.networking.FirstContactMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Tile)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.FirstContactMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NationSummaryMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NationSummaryMessage.class) {
net.sf.freecol.common.networking.NationSummaryMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.NationSummary.class))
    return new net.sf.freecol.common.networking.NationSummaryMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.NationSummary)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NationSummaryMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RenameMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RenameMessage.class) {
net.sf.freecol.common.networking.RenameMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.FreeColGameObject.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.RenameMessage((net.sf.freecol.common.model.FreeColGameObject)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RenameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.FeatureChangeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.FeatureChangeMessage.class) {
net.sf.freecol.common.networking.FeatureChangeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColObject.class, boolean.class))
    return new net.sf.freecol.common.networking.FeatureChangeMessage((net.sf.freecol.common.model.FreeColGameObject)params[0], (net.sf.freecol.common.model.FreeColObject)params[1], (boolean)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.FeatureChangeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.LogoutMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.LogoutMessage.class) {
net.sf.freecol.common.networking.LogoutMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Game.LogoutReason.class))
    return new net.sf.freecol.common.networking.LogoutMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Game.LogoutReason)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LogoutMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ContinueMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ContinueMessage.class) {
net.sf.freecol.common.networking.ContinueMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.ContinueMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ContinueMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.EnterRevengeModeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.EnterRevengeModeMessage.class) {
net.sf.freecol.common.networking.EnterRevengeModeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.EnterRevengeModeMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EnterRevengeModeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RearrangeColonyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RearrangeColonyMessage.class) {
net.sf.freecol.common.networking.RearrangeColonyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, java.util.List.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.RearrangeColonyMessage((net.sf.freecol.common.model.Colony)params[0], (java.util.List)params[1], (net.sf.freecol.common.model.Colony)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RearrangeColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetCurrentPlayerMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetCurrentPlayerMessage.class) {
net.sf.freecol.common.networking.SetCurrentPlayerMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.networking.SetCurrentPlayerMessage((net.sf.freecol.common.model.Player)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetCurrentPlayerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DeclareIndependenceMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DeclareIndependenceMessage.class) {
net.sf.freecol.common.networking.DeclareIndependenceMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.DeclareIndependenceMessage((java.lang.String)params[0], (java.lang.String)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeclareIndependenceMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RemoveMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RemoveMessage.class) {
net.sf.freecol.common.networking.RemoveMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, java.util.List.class))
    return new net.sf.freecol.common.networking.RemoveMessage((java.lang.String)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RemoveMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ChangeStateMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ChangeStateMessage.class) {
net.sf.freecol.common.networking.ChangeStateMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.UnitState.class))
    return new net.sf.freecol.common.networking.ChangeStateMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit.UnitState)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChangeStateMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.UpdateServerMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.UpdateServerMessage.class) {
net.sf.freecol.common.networking.UpdateServerMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.metaserver.ServerInfo.class))
    return new net.sf.freecol.common.networking.UpdateServerMessage((net.sf.freecol.common.metaserver.ServerInfo)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateServerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ChooseFoundingFatherMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ChooseFoundingFatherMessage.class) {
net.sf.freecol.common.networking.ChooseFoundingFatherMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChooseFoundingFatherMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, java.util.List.class, net.sf.freecol.common.model.FoundingFather.class))
    return new net.sf.freecol.common.networking.ChooseFoundingFatherMessage((java.util.List)params[0], (net.sf.freecol.common.model.FoundingFather)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AttributeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AttributeMessage.class) {
net.sf.freecol.common.networking.AttributeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, java.lang.String[].class))
    return new net.sf.freecol.common.networking.AttributeMessage((java.lang.String)params[0], (java.lang.String[])params[1]);
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.networking.AttributeMessage((java.lang.String)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetDestinationMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetDestinationMessage.class) {
net.sf.freecol.common.networking.SetDestinationMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.networking.SetDestinationMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Location)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetDestinationMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.MoveToMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.MoveToMessage.class) {
net.sf.freecol.common.networking.MoveToMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.networking.MoveToMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Location)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MoveToMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NewTradeRouteMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NewTradeRouteMessage.class) {
net.sf.freecol.common.networking.NewTradeRouteMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.NewTradeRouteMessage((net.sf.freecol.common.model.TradeRoute)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetDeadMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetDeadMessage.class) {
net.sf.freecol.common.networking.SetDeadMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.networking.SetDeadMessage((net.sf.freecol.common.model.Player)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetDeadMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.MonarchActionMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.MonarchActionMessage.class) {
net.sf.freecol.common.networking.MonarchActionMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Monarch.MonarchAction.class, net.sf.freecol.common.model.StringTemplate.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.MonarchActionMessage((net.sf.freecol.common.model.Monarch.MonarchAction)params[0], (net.sf.freecol.common.model.StringTemplate)params[1], (java.lang.String)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MonarchActionMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ServerListMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ServerListMessage.class) {
net.sf.freecol.common.networking.ServerListMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.ServerListMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ServerListMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AttackMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AttackMessage.class) {
net.sf.freecol.common.networking.AttackMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.AttackMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AttackMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ServerInfoMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ServerInfoMessage.class) {
net.sf.freecol.common.networking.ServerInfoMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ServerInfoMessage((java.lang.String)params[0], (net.sf.freecol.common.model.Game)params[1], (net.sf.freecol.common.io.FreeColXMLReader)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AskSkillMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AskSkillMessage.class) {
net.sf.freecol.common.networking.AskSkillMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.AskSkillMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AskSkillMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.InciteMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.InciteMessage.class) {
net.sf.freecol.common.networking.InciteMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class, net.sf.freecol.common.model.Player.class, int.class))
    return new net.sf.freecol.common.networking.InciteMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1], (net.sf.freecol.common.model.Player)params[2], (int)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.InciteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NativeGiftMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NativeGiftMessage.class) {
net.sf.freecol.common.networking.NativeGiftMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.NativeGiftMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Colony)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NativeGiftMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DemandTributeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DemandTributeMessage.class) {
net.sf.freecol.common.networking.DemandTributeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.DemandTributeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DemandTributeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.IndianDemandMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.IndianDemandMessage.class) {
net.sf.freecol.common.networking.IndianDemandMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.networking.IndianDemandMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.GoodsType)params[2], (int)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.IndianDemandMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetColorMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetColorMessage.class) {
net.sf.freecol.common.networking.SetColorMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Nation.class, java.awt.Color.class))
    return new net.sf.freecol.common.networking.SetColorMessage((net.sf.freecol.common.model.Nation)params[0], (java.awt.Color)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetColorMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetNationTypeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetNationTypeMessage.class) {
net.sf.freecol.common.networking.SetNationTypeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.NationType.class))
    return new net.sf.freecol.common.networking.SetNationTypeMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.NationType)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetNationTypeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.UpdateTradeRouteMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.UpdateTradeRouteMessage.class) {
net.sf.freecol.common.networking.UpdateTradeRouteMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.UpdateTradeRouteMessage((net.sf.freecol.common.model.TradeRoute)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.BuildColonyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.BuildColonyMessage.class) {
net.sf.freecol.common.networking.BuildColonyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.BuildColonyMessage((java.lang.String)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.BuildColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.PutOutsideColonyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.PutOutsideColonyMessage.class) {
net.sf.freecol.common.networking.PutOutsideColonyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.PutOutsideColonyMessage((net.sf.freecol.common.model.Unit)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PutOutsideColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.JoinColonyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.JoinColonyMessage.class) {
net.sf.freecol.common.networking.JoinColonyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.JoinColonyMessage((net.sf.freecol.common.model.Colony)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.JoinColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.LearnSkillMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.LearnSkillMessage.class) {
net.sf.freecol.common.networking.LearnSkillMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.LearnSkillMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LearnSkillMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetNationMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetNationMessage.class) {
net.sf.freecol.common.networking.SetNationMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Nation.class))
    return new net.sf.freecol.common.networking.SetNationMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Nation)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetNationMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ReplyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ReplyMessage.class) {
net.sf.freecol.common.networking.ReplyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, int.class, net.sf.freecol.common.networking.Message.class))
    return new net.sf.freecol.common.networking.ReplyMessage((int)params[0], (net.sf.freecol.common.networking.Message)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ReplyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AnimateAttackMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AnimateAttackMessage.class) {
net.sf.freecol.common.networking.AnimateAttackMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class, boolean.class, boolean.class, boolean.class))
    return new net.sf.freecol.common.networking.AnimateAttackMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[0], (boolean)params[2], (boolean)params[2], (boolean)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AnimateAttackMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ObjectMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ObjectMessage.class) {
});
names.put("common.networking.SetCurrentStopMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetCurrentStopMessage.class) {
net.sf.freecol.common.networking.SetCurrentStopMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, int.class))
    return new net.sf.freecol.common.networking.SetCurrentStopMessage((net.sf.freecol.common.model.Unit)params[0], (int)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetCurrentStopMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NativeTradeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NativeTradeMessage.class) {
net.sf.freecol.common.networking.NativeTradeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NativeTradeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.NativeTrade.NativeTradeAction.class, net.sf.freecol.common.model.NativeTrade.class))
    return new net.sf.freecol.common.networking.NativeTradeMessage((net.sf.freecol.common.model.NativeTrade.NativeTradeAction)params[0], (net.sf.freecol.common.model.NativeTrade)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class))
    return new net.sf.freecol.common.networking.NativeTradeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ErrorMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ErrorMessage.class) {
net.sf.freecol.common.networking.ErrorMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ErrorMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, java.lang.String.class, java.lang.Exception.class))
    return new net.sf.freecol.common.networking.ErrorMessage((java.lang.String)params[0], (java.lang.Exception)params[1]);
  if (areSame(types, java.lang.Exception.class))
    return new net.sf.freecol.common.networking.ErrorMessage((java.lang.Exception)params[0]);
  if (areSame(types, net.sf.freecol.common.model.StringTemplate.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.ErrorMessage((net.sf.freecol.common.model.StringTemplate)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.StringTemplate.class))
    return new net.sf.freecol.common.networking.ErrorMessage((net.sf.freecol.common.model.StringTemplate)params[0]);
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.networking.ErrorMessage((java.lang.String)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NewTurnMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NewTurnMessage.class) {
net.sf.freecol.common.networking.NewTurnMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Turn.class))
    return new net.sf.freecol.common.networking.NewTurnMessage((net.sf.freecol.common.model.Turn)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewTurnMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ClaimLandMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ClaimLandMessage.class) {
net.sf.freecol.common.networking.ClaimLandMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.FreeColGameObject.class, int.class))
    return new net.sf.freecol.common.networking.ClaimLandMessage((net.sf.freecol.common.model.Tile)params[0], (net.sf.freecol.common.model.FreeColGameObject)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ClaimLandMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.PayArrearsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.PayArrearsMessage.class) {
net.sf.freecol.common.networking.PayArrearsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.common.networking.PayArrearsMessage((net.sf.freecol.common.model.GoodsType)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PayArrearsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DeliverGiftMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DeliverGiftMessage.class) {
net.sf.freecol.common.networking.DeliverGiftMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class, net.sf.freecol.common.model.Goods.class))
    return new net.sf.freecol.common.networking.DeliverGiftMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1], (net.sf.freecol.common.model.Goods)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeliverGiftMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.VacantPlayersMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.VacantPlayersMessage.class) {
net.sf.freecol.common.networking.VacantPlayersMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.VacantPlayersMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.VacantPlayersMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AssignTradeRouteMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AssignTradeRouteMessage.class) {
net.sf.freecol.common.networking.AssignTradeRouteMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.AssignTradeRouteMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.TradeRoute)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AssignTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ReconnectMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ReconnectMessage.class) {
net.sf.freecol.common.networking.ReconnectMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.ReconnectMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ReconnectMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.PayForBuildingMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.PayForBuildingMessage.class) {
net.sf.freecol.common.networking.PayForBuildingMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.PayForBuildingMessage((net.sf.freecol.common.model.Colony)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PayForBuildingMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ClearSpecialityMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ClearSpecialityMessage.class) {
net.sf.freecol.common.networking.ClearSpecialityMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.ClearSpecialityMessage((net.sf.freecol.common.model.Unit)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ClearSpecialityMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.LootCargoMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.LootCargoMessage.class) {
net.sf.freecol.common.networking.LootCargoMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, java.lang.String.class, java.util.List.class))
    return new net.sf.freecol.common.networking.LootCargoMessage((net.sf.freecol.common.model.Unit)params[0], (java.lang.String)params[1], (java.util.List)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LootCargoMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ScoutIndianSettlementMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ScoutIndianSettlementMessage.class) {
net.sf.freecol.common.networking.ScoutIndianSettlementMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.ScoutIndianSettlementMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ScoutIndianSettlementMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RegisterServerMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RegisterServerMessage.class) {
net.sf.freecol.common.networking.RegisterServerMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.metaserver.ServerInfo.class))
    return new net.sf.freecol.common.networking.RegisterServerMessage((net.sf.freecol.common.metaserver.ServerInfo)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RegisterServerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetAIMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetAIMessage.class) {
net.sf.freecol.common.networking.SetAIMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, boolean.class))
    return new net.sf.freecol.common.networking.SetAIMessage((net.sf.freecol.common.model.Player)params[0], (boolean)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetAIMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.CashInTreasureTrainMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.CashInTreasureTrainMessage.class) {
net.sf.freecol.common.networking.CashInTreasureTrainMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.CashInTreasureTrainMessage((net.sf.freecol.common.model.Unit)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.CashInTreasureTrainMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AddPlayerMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AddPlayerMessage.class) {
net.sf.freecol.common.networking.AddPlayerMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.util.List.class))
    return new net.sf.freecol.common.networking.AddPlayerMessage((net.sf.freecol.common.model.Player)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AddPlayerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DiplomacyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DiplomacyMessage.class) {
net.sf.freecol.common.networking.DiplomacyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Colony)params[0], (net.sf.freecol.common.model.Unit)params[1], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  if (areSame(types, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.FreeColGameObject)params[0], (net.sf.freecol.common.model.FreeColGameObject)params[0], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DeleteTradeRouteMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DeleteTradeRouteMessage.class) {
net.sf.freecol.common.networking.DeleteTradeRouteMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.DeleteTradeRouteMessage((net.sf.freecol.common.model.TradeRoute)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeleteTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RetireMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RetireMessage.class) {
net.sf.freecol.common.networking.RetireMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.RetireMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RetireMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.StartGameMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.StartGameMessage.class) {
net.sf.freecol.common.networking.StartGameMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.StartGameMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.StartGameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AnimateMoveMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AnimateMoveMessage.class) {
net.sf.freecol.common.networking.AnimateMoveMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.Tile.class, boolean.class))
    return new net.sf.freecol.common.networking.AnimateMoveMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.Tile)params[1], (boolean)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AnimateMoveMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SpySettlementMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SpySettlementMessage.class) {
net.sf.freecol.common.networking.SpySettlementMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Settlement.class))
    return new net.sf.freecol.common.networking.SpySettlementMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Settlement)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SpySettlementMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DisembarkMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DisembarkMessage.class) {
net.sf.freecol.common.networking.DisembarkMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.DisembarkMessage((net.sf.freecol.common.model.Unit)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DisembarkMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.LoadGoodsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.LoadGoodsMessage.class) {
net.sf.freecol.common.networking.LoadGoodsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, int.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.LoadGoodsMessage((net.sf.freecol.common.model.Location)params[0], (net.sf.freecol.common.model.GoodsType)params[1], (int)params[2], (net.sf.freecol.common.model.Unit)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LoadGoodsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RemoveServerMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RemoveServerMessage.class) {
net.sf.freecol.common.networking.RemoveServerMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.metaserver.ServerInfo.class))
    return new net.sf.freecol.common.networking.RemoveServerMessage((net.sf.freecol.common.metaserver.ServerInfo)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RemoveServerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NewRegionNameMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NewRegionNameMessage.class) {
net.sf.freecol.common.networking.NewRegionNameMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewRegionNameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Region.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.Unit.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.NewRegionNameMessage((net.sf.freecol.common.model.Region)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.Unit)params[2], (java.lang.String)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.WorkMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.WorkMessage.class) {
net.sf.freecol.common.networking.WorkMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.WorkLocation.class))
    return new net.sf.freecol.common.networking.WorkMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.WorkLocation)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.WorkMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.UnloadGoodsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.UnloadGoodsMessage.class) {
net.sf.freecol.common.networking.UnloadGoodsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, int.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.UnloadGoodsMessage((net.sf.freecol.common.model.GoodsType)params[0], (int)params[1], (net.sf.freecol.common.model.Unit)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UnloadGoodsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ScoutSpeakToChiefMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.class) {
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.ScoutSpeakToChiefMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1], (java.lang.String)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ScoutSpeakToChiefMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DeclineMoundsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DeclineMoundsMessage.class) {
net.sf.freecol.common.networking.DeclineMoundsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.DeclineMoundsMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeclineMoundsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetBuildQueueMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetBuildQueueMessage.class) {
net.sf.freecol.common.networking.SetBuildQueueMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, java.util.List.class))
    return new net.sf.freecol.common.networking.SetBuildQueueMessage((net.sf.freecol.common.model.Colony)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetBuildQueueMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.EmbarkMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.EmbarkMessage.class) {
net.sf.freecol.common.networking.EmbarkMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.EmbarkMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EmbarkMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.CloseMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.CloseMessage.class) {
net.sf.freecol.common.networking.CloseMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.networking.CloseMessage((java.lang.String)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.CloseMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AssignTeacherMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AssignTeacherMessage.class) {
net.sf.freecol.common.networking.AssignTeacherMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.AssignTeacherMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AssignTeacherMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.AbandonColonyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.AbandonColonyMessage.class) {
net.sf.freecol.common.networking.AbandonColonyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.AbandonColonyMessage((net.sf.freecol.common.model.Colony)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AbandonColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.UpdateMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.UpdateMessage.class) {
net.sf.freecol.common.networking.UpdateMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.util.List.class))
    return new net.sf.freecol.common.networking.UpdateMessage((net.sf.freecol.common.model.Player)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.FreeColGameObject.class))
    return new net.sf.freecol.common.networking.UpdateMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.FreeColGameObject)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DisconnectMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DisconnectMessage.class) {
net.sf.freecol.common.networking.DisconnectMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.DisconnectMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DisconnectMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.MultipleMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.MultipleMessage.class) {
net.sf.freecol.common.networking.MultipleMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.util.List.class))
    return new net.sf.freecol.common.networking.MultipleMessage((java.util.List)params[0]);
  if (types.length == 0)
    return new net.sf.freecol.common.networking.MultipleMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MultipleMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ChatMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ChatMessage.class) {
net.sf.freecol.common.networking.ChatMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.lang.String.class, boolean.class))
    return new net.sf.freecol.common.networking.ChatMessage((net.sf.freecol.common.model.Player)params[0], (java.lang.String)params[1], (boolean)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChatMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.WrapperMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.WrapperMessage.class) {
});
names.put("common.networking.GameEndedMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.GameEndedMessage.class) {
net.sf.freecol.common.networking.GameEndedMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, boolean.class))
    return new net.sf.freecol.common.networking.GameEndedMessage((net.sf.freecol.common.model.Player)params[0], (boolean)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.GameEndedMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.GameStateMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.GameStateMessage.class) {
net.sf.freecol.common.networking.GameStateMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.GameStateMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.FreeColServer.ServerState.class))
    return new net.sf.freecol.common.networking.GameStateMessage((net.sf.freecol.server.FreeColServer.ServerState)params[0]);
  if (types.length == 0)
    return new net.sf.freecol.common.networking.GameStateMessage();
  throw new IllegalArgumentException();
}
});
names.put("common.networking.Message", new Introspector.Impl<>(net.sf.freecol.common.networking.Message.class) {
});
names.put("common.networking.MoveMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.MoveMessage.class) {
net.sf.freecol.common.networking.MoveMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.MoveMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MoveMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.LoginMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.LoginMessage.class) {
net.sf.freecol.common.networking.LoginMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, net.sf.freecol.server.FreeColServer.ServerState.class, boolean.class, boolean.class, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.networking.LoginMessage((net.sf.freecol.common.model.Player)params[0], (java.lang.String)params[1], (java.lang.String)params[1], (java.lang.String)params[1], (net.sf.freecol.server.FreeColServer.ServerState)params[4], (boolean)params[5], (boolean)params[5], (net.sf.freecol.common.model.Game)params[7]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LoginMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.DisbandUnitMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.DisbandUnitMessage.class) {
net.sf.freecol.common.networking.DisbandUnitMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.DisbandUnitMessage((net.sf.freecol.common.model.Unit)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DisbandUnitMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.SetAvailableMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetAvailableMessage.class) {
net.sf.freecol.common.networking.SetAvailableMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Nation.class, net.sf.freecol.common.model.NationOptions.NationState.class))
    return new net.sf.freecol.common.networking.SetAvailableMessage((net.sf.freecol.common.model.Nation)params[0], (net.sf.freecol.common.model.NationOptions.NationState)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetAvailableMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ConnectionVerificationMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ConnectionVerificationMessage.class) {
net.sf.freecol.common.networking.ConnectionVerificationMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, boolean.class))
    return new net.sf.freecol.common.networking.ConnectionVerificationMessage((boolean)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ConnectionVerificationMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ChangeWorkImprovementTypeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.class) {
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.TileImprovementType.class))
    return new net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.TileImprovementType)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.PartialMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.PartialMessage.class) {
net.sf.freecol.common.networking.PartialMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.util.Map.class))
    return new net.sf.freecol.common.networking.PartialMessage((java.util.Map)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PartialMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.QuestionMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.QuestionMessage.class) {
net.sf.freecol.common.networking.QuestionMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, int.class, net.sf.freecol.common.networking.Message.class))
    return new net.sf.freecol.common.networking.QuestionMessage((int)params[0], (net.sf.freecol.common.networking.Message)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.QuestionMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.TrivialMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.TrivialMessage.class) {
});
names.put("common.networking.SetStanceMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.SetStanceMessage.class) {
net.sf.freecol.common.networking.SetStanceMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Stance.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.networking.SetStanceMessage((net.sf.freecol.common.model.Stance)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetStanceMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.EndTurnMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.EndTurnMessage.class) {
net.sf.freecol.common.networking.EndTurnMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.EndTurnMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EndTurnMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.RequestLaunchMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.RequestLaunchMessage.class) {
net.sf.freecol.common.networking.RequestLaunchMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.networking.RequestLaunchMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RequestLaunchMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ChangeWorkTypeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ChangeWorkTypeMessage.class) {
net.sf.freecol.common.networking.ChangeWorkTypeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.common.networking.ChangeWorkTypeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.GoodsType)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChangeWorkTypeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.TrainUnitInEuropeMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.TrainUnitInEuropeMessage.class) {
net.sf.freecol.common.networking.TrainUnitInEuropeMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.UnitType.class))
    return new net.sf.freecol.common.networking.TrainUnitInEuropeMessage((net.sf.freecol.common.model.UnitType)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.TrainUnitInEuropeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.ReadyMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.ReadyMessage.class) {
net.sf.freecol.common.networking.ReadyMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class, boolean.class))
    return new net.sf.freecol.common.networking.ReadyMessage((net.sf.freecol.common.model.Player)params[0], (boolean)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ReadyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.EquipForRoleMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.EquipForRoleMessage.class) {
net.sf.freecol.common.networking.EquipForRoleMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Role.class, int.class))
    return new net.sf.freecol.common.networking.EquipForRoleMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Role)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EquipForRoleMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.UpdateGameOptionsMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.UpdateGameOptionsMessage.class) {
net.sf.freecol.common.networking.UpdateGameOptionsMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.option.OptionGroup.class))
    return new net.sf.freecol.common.networking.UpdateGameOptionsMessage((net.sf.freecol.common.option.OptionGroup)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateGameOptionsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.FountainOfYouthMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.FountainOfYouthMessage.class) {
net.sf.freecol.common.networking.FountainOfYouthMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, int.class))
    return new net.sf.freecol.common.networking.FountainOfYouthMessage((int)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.FountainOfYouthMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.networking.NewLandNameMessage", new Introspector.Impl<>(net.sf.freecol.common.networking.NewLandNameMessage.class) {
net.sf.freecol.common.networking.NewLandNameMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.NewLandNameMessage((net.sf.freecol.common.model.Unit)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewLandNameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.ModelMessage", new Introspector.Impl<>(net.sf.freecol.common.model.ModelMessage.class) {
net.sf.freecol.common.model.ModelMessage newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.ModelMessage.MessageType.class, java.lang.String.class, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColObject.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.model.ModelMessage.MessageType)params[0], (java.lang.String)params[1], (net.sf.freecol.common.model.FreeColGameObject)params[2], (net.sf.freecol.common.model.FreeColObject)params[3]);
  if (areSame(types, net.sf.freecol.common.model.ModelMessage.MessageType.class, java.lang.String.class, java.lang.String.class, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColObject.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.model.ModelMessage.MessageType)params[0], (java.lang.String)params[1], (java.lang.String)params[1], (net.sf.freecol.common.model.FreeColGameObject)params[3], (net.sf.freecol.common.model.FreeColObject)params[4]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.ModelMessage();
  if (areSame(types, net.sf.freecol.common.model.ModelMessage.MessageType.class, java.lang.String.class, net.sf.freecol.common.model.FreeColGameObject.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.model.ModelMessage.MessageType)params[0], (java.lang.String)params[1], (net.sf.freecol.common.model.FreeColGameObject)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Tile", new Introspector.Impl<>(net.sf.freecol.common.model.Tile.class) {
net.sf.freecol.common.model.Tile newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.TileType.class, int.class, int.class))
    return new net.sf.freecol.common.model.Tile((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.TileType)params[1], (int)params[2], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Tile((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.SettlementType", new Introspector.Impl<>(net.sf.freecol.common.model.SettlementType.class) {
net.sf.freecol.common.model.SettlementType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.SettlementType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.SettlementType((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Role", new Introspector.Impl<>(net.sf.freecol.common.model.Role.class) {
net.sf.freecol.common.model.Role newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Role((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.PlunderType", new Introspector.Impl<>(net.sf.freecol.common.model.PlunderType.class) {
net.sf.freecol.common.model.PlunderType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.PlunderType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.PlunderType((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TileItem", new Introspector.Impl<>(net.sf.freecol.common.model.TileItem.class) {
});
names.put("common.model.GoodsTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.GoodsTradeItem.class) {
net.sf.freecol.common.model.GoodsTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Goods.class))
    return new net.sf.freecol.common.model.GoodsTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Goods)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.GoodsTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Goods", new Introspector.Impl<>(net.sf.freecol.common.model.Goods.class) {
net.sf.freecol.common.model.Goods newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.Goods((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.GoodsType)params[2], (int)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Goods((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Goods((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.WorkLocation", new Introspector.Impl<>(net.sf.freecol.common.model.WorkLocation.class) {
});
names.put("common.model.ProductionType", new Introspector.Impl<>(net.sf.freecol.common.model.ProductionType.class) {
net.sf.freecol.common.model.ProductionType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.AbstractGoods.class, boolean.class, java.lang.String.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.model.AbstractGoods)params[0], (boolean)params[1], (java.lang.String)params[2]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.model.GoodsType)params[0], (net.sf.freecol.common.model.GoodsType)params[0], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, java.util.List.class, java.util.List.class))
    return new net.sf.freecol.common.model.ProductionType((java.util.List)params[0], (java.util.List)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.IndianSettlement", new Introspector.Impl<>(net.sf.freecol.common.model.IndianSettlement.class) {
net.sf.freecol.common.model.IndianSettlement newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.IndianSettlement((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Scope", new Introspector.Impl<>(net.sf.freecol.common.model.Scope.class) {
net.sf.freecol.common.model.Scope newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Scope((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.Scope();
  throw new IllegalArgumentException();
}
});
names.put("common.model.Market", new Introspector.Impl<>(net.sf.freecol.common.model.Market.class) {
net.sf.freecol.common.model.Market newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Market((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.Market((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.FreeColSpecObjectType", new Introspector.Impl<>(net.sf.freecol.common.model.FreeColSpecObjectType.class) {
});
names.put("common.model.Limit", new Introspector.Impl<>(net.sf.freecol.common.model.Limit.class) {
net.sf.freecol.common.model.Limit newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Limit((net.sf.freecol.common.model.Specification)params[0]);
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Operand.class, net.sf.freecol.common.model.Limit.Operator.class, net.sf.freecol.common.model.Operand.class))
    return new net.sf.freecol.common.model.Limit((java.lang.String)params[0], (net.sf.freecol.common.model.Operand)params[1], (net.sf.freecol.common.model.Limit.Operator)params[2], (net.sf.freecol.common.model.Operand)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Limit((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Disaster", new Introspector.Impl<>(net.sf.freecol.common.model.Disaster.class) {
net.sf.freecol.common.model.Disaster newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Disaster((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Building", new Introspector.Impl<>(net.sf.freecol.common.model.Building.class) {
net.sf.freecol.common.model.Building newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Building((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Modifier", new Introspector.Impl<>(net.sf.freecol.common.model.Modifier.class) {
net.sf.freecol.common.model.Modifier newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, float.class, net.sf.freecol.common.model.Modifier.ModifierType.class))
    return new net.sf.freecol.common.model.Modifier((java.lang.String)params[0], (float)params[1], (net.sf.freecol.common.model.Modifier.ModifierType)params[2]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Modifier((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, java.lang.String.class, float.class, net.sf.freecol.common.model.Modifier.ModifierType.class, net.sf.freecol.common.model.FreeColObject.class))
    return new net.sf.freecol.common.model.Modifier((java.lang.String)params[0], (float)params[1], (net.sf.freecol.common.model.Modifier.ModifierType)params[2], (net.sf.freecol.common.model.FreeColObject)params[3]);
  if (areSame(types, java.lang.String.class, float.class, net.sf.freecol.common.model.Modifier.ModifierType.class, net.sf.freecol.common.model.FreeColObject.class, int.class))
    return new net.sf.freecol.common.model.Modifier((java.lang.String)params[0], (float)params[1], (net.sf.freecol.common.model.Modifier.ModifierType)params[2], (net.sf.freecol.common.model.FreeColObject)params[3], (int)params[4]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Modifier((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.UnitChangeType", new Introspector.Impl<>(net.sf.freecol.common.model.UnitChangeType.class) {
net.sf.freecol.common.model.UnitChangeType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitChangeType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.NativeTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.NativeTradeItem.class) {
net.sf.freecol.common.model.NativeTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.NativeTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.NativeTradeItem.class))
    return new net.sf.freecol.common.model.NativeTradeItem((net.sf.freecol.common.model.NativeTradeItem)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Goods.class))
    return new net.sf.freecol.common.model.NativeTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Goods)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.MarketData", new Introspector.Impl<>(net.sf.freecol.common.model.MarketData.class) {
net.sf.freecol.common.model.MarketData newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.common.model.MarketData((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.GoodsType)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.MarketData((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Operand", new Introspector.Impl<>(net.sf.freecol.common.model.Operand.class) {
net.sf.freecol.common.model.Operand newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Operand.OperandType.class, net.sf.freecol.common.model.Operand.ScopeLevel.class))
    return new net.sf.freecol.common.model.Operand((net.sf.freecol.common.model.Operand.OperandType)params[0], (net.sf.freecol.common.model.Operand.ScopeLevel)params[1]);
  if (areSame(types, int.class))
    return new net.sf.freecol.common.model.Operand((int)params[0]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.Operand();
  throw new IllegalArgumentException();
}
});
names.put("common.model.TileImprovementType", new Introspector.Impl<>(net.sf.freecol.common.model.TileImprovementType.class) {
net.sf.freecol.common.model.TileImprovementType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileImprovementType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Region", new Introspector.Impl<>(net.sf.freecol.common.model.Region.class) {
net.sf.freecol.common.model.Region newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.model.Region((net.sf.freecol.common.model.Game)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Region((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Unit", new Introspector.Impl<>(net.sf.freecol.common.model.Unit.class) {
net.sf.freecol.common.model.Unit newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Unit((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.DiplomaticTrade", new Introspector.Impl<>(net.sf.freecol.common.model.DiplomaticTrade.class) {
net.sf.freecol.common.model.DiplomaticTrade newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.DiplomaticTrade((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.DiplomaticTrade.TradeContext.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, java.util.List.class, int.class))
    return new net.sf.freecol.common.model.DiplomaticTrade((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.DiplomaticTrade.TradeContext)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Player)params[2], (java.util.List)params[4], (int)params[5]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.AbstractUnit", new Introspector.Impl<>(net.sf.freecol.common.model.AbstractUnit.class) {
net.sf.freecol.common.model.AbstractUnit newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.model.AbstractUnit();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.AbstractUnit((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.UnitType.class, java.lang.String.class, int.class))
    return new net.sf.freecol.common.model.AbstractUnit((net.sf.freecol.common.model.UnitType)params[0], (java.lang.String)params[1], (int)params[2]);
  if (areSame(types, java.lang.String.class, java.lang.String.class, int.class))
    return new net.sf.freecol.common.model.AbstractUnit((java.lang.String)params[0], (java.lang.String)params[0], (int)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.IndianNationType", new Introspector.Impl<>(net.sf.freecol.common.model.IndianNationType.class) {
net.sf.freecol.common.model.IndianNationType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.IndianNationType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.InciteTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.InciteTradeItem.class) {
net.sf.freecol.common.model.InciteTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.InciteTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.InciteTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.EuropeanNationType", new Introspector.Impl<>(net.sf.freecol.common.model.EuropeanNationType.class) {
net.sf.freecol.common.model.EuropeanNationType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.EuropeanNationType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.GoldTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.GoldTradeItem.class) {
net.sf.freecol.common.model.GoldTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.GoldTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, int.class))
    return new net.sf.freecol.common.model.GoldTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (int)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TradeRouteStop", new Introspector.Impl<>(net.sf.freecol.common.model.TradeRouteStop.class) {
net.sf.freecol.common.model.TradeRouteStop newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.TradeRouteStop.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.TradeRouteStop)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.Game)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TileItemContainer", new Introspector.Impl<>(net.sf.freecol.common.model.TileItemContainer.class) {
net.sf.freecol.common.model.TileItemContainer newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.model.TileItemContainer((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.TileItemContainer((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.ResourceType", new Introspector.Impl<>(net.sf.freecol.common.model.ResourceType.class) {
net.sf.freecol.common.model.ResourceType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.ResourceType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.FoundingFather", new Introspector.Impl<>(net.sf.freecol.common.model.FoundingFather.class) {
net.sf.freecol.common.model.FoundingFather newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.FoundingFather((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.HighScore", new Introspector.Impl<>(net.sf.freecol.common.model.HighScore.class) {
net.sf.freecol.common.model.HighScore newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.HighScore((net.sf.freecol.common.model.Player)params[0]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.HighScore();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.HighScore((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.UnitTypeChange", new Introspector.Impl<>(net.sf.freecol.common.model.UnitTypeChange.class) {
net.sf.freecol.common.model.UnitTypeChange newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitTypeChange((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitTypeChange((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.GoodsLocation", new Introspector.Impl<>(net.sf.freecol.common.model.GoodsLocation.class) {
});
names.put("common.model.Map", new Introspector.Impl<>(net.sf.freecol.common.model.Map.class) {
net.sf.freecol.common.model.Map newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Map((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, int.class, int.class))
    return new net.sf.freecol.common.model.Map((net.sf.freecol.common.model.Game)params[0], (int)params[1], (int)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Map((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Specification$Source", new Introspector.Impl<>(net.sf.freecol.common.model.Specification.Source.class) {
net.sf.freecol.common.model.Specification.Source newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.model.Specification.Source((java.lang.String)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.UnitTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.UnitTradeItem.class) {
net.sf.freecol.common.model.UnitTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.UnitTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.model.UnitTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Unit)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.TradeItem.class) {
});
names.put("common.model.Feature", new Introspector.Impl<>(net.sf.freecol.common.model.Feature.class) {
});
names.put("common.model.ColonyTile", new Introspector.Impl<>(net.sf.freecol.common.model.ColonyTile.class) {
net.sf.freecol.common.model.ColonyTile newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.ColonyTile((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Monarch", new Introspector.Impl<>(net.sf.freecol.common.model.Monarch.class) {
net.sf.freecol.common.model.Monarch newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.Monarch((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Monarch((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TileType", new Introspector.Impl<>(net.sf.freecol.common.model.TileType.class) {
net.sf.freecol.common.model.TileType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.AbstractGoods", new Introspector.Impl<>(net.sf.freecol.common.model.AbstractGoods.class) {
net.sf.freecol.common.model.AbstractGoods newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.model.AbstractGoods();
  if (areSame(types, net.sf.freecol.common.model.AbstractGoods.class))
    return new net.sf.freecol.common.model.AbstractGoods((net.sf.freecol.common.model.AbstractGoods)params[0]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.AbstractGoods((net.sf.freecol.common.model.GoodsType)params[0], (int)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TileTypeChange", new Introspector.Impl<>(net.sf.freecol.common.model.TileTypeChange.class) {
net.sf.freecol.common.model.TileTypeChange newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileTypeChange((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileTypeChange((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.NativeTrade", new Introspector.Impl<>(net.sf.freecol.common.model.NativeTrade.class) {
net.sf.freecol.common.model.NativeTrade newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class))
    return new net.sf.freecol.common.model.NativeTrade((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.NativeTrade((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.StanceTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.StanceTradeItem.class) {
net.sf.freecol.common.model.StanceTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.StanceTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Stance.class))
    return new net.sf.freecol.common.model.StanceTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Stance)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.UnitLocation", new Introspector.Impl<>(net.sf.freecol.common.model.UnitLocation.class) {
});
names.put("common.model.FreeColGameObject", new Introspector.Impl<>(net.sf.freecol.common.model.FreeColGameObject.class) {
});
names.put("common.model.Nation", new Introspector.Impl<>(net.sf.freecol.common.model.Nation.class) {
net.sf.freecol.common.model.Nation newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Nation((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Settlement", new Introspector.Impl<>(net.sf.freecol.common.model.Settlement.class) {
});
names.put("common.model.ColonyTradeItem", new Introspector.Impl<>(net.sf.freecol.common.model.ColonyTradeItem.class) {
net.sf.freecol.common.model.ColonyTradeItem newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.model.ColonyTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Colony)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.ColonyTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Resource", new Introspector.Impl<>(net.sf.freecol.common.model.Resource.class) {
net.sf.freecol.common.model.Resource newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Resource((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.ResourceType.class))
    return new net.sf.freecol.common.model.Resource((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.ResourceType)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.ResourceType.class, int.class))
    return new net.sf.freecol.common.model.Resource((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.ResourceType)params[2], (int)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.HistoryEvent", new Introspector.Impl<>(net.sf.freecol.common.model.HistoryEvent.class) {
net.sf.freecol.common.model.HistoryEvent newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.HistoryEvent((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Turn.class, net.sf.freecol.common.model.HistoryEvent.HistoryEventType.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.HistoryEvent((net.sf.freecol.common.model.Turn)params[0], (net.sf.freecol.common.model.HistoryEvent.HistoryEventType)params[1], (net.sf.freecol.common.model.Player)params[2]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.HistoryEvent();
  throw new IllegalArgumentException();
}
});
names.put("common.model.LostCityRumour", new Introspector.Impl<>(net.sf.freecol.common.model.LostCityRumour.class) {
net.sf.freecol.common.model.LostCityRumour newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.LostCityRumour((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.LostCityRumour.RumourType.class, java.lang.String.class))
    return new net.sf.freecol.common.model.LostCityRumour((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.LostCityRumour.RumourType)params[2], (java.lang.String)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.model.LostCityRumour((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Europe", new Introspector.Impl<>(net.sf.freecol.common.model.Europe.class) {
net.sf.freecol.common.model.Europe newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Europe((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.FreeColSpecObject", new Introspector.Impl<>(net.sf.freecol.common.model.FreeColSpecObject.class) {
});
names.put("common.model.Ability", new Introspector.Impl<>(net.sf.freecol.common.model.Ability.class) {
net.sf.freecol.common.model.Ability newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Ability.class))
    return new net.sf.freecol.common.model.Ability((net.sf.freecol.common.model.Ability)params[0]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Ability((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Ability((net.sf.freecol.common.model.Specification)params[0]);
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.FreeColSpecObjectType.class, boolean.class))
    return new net.sf.freecol.common.model.Ability((java.lang.String)params[0], (net.sf.freecol.common.model.FreeColSpecObjectType)params[1], (boolean)params[2]);
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.model.Ability((java.lang.String)params[0]);
  if (areSame(types, java.lang.String.class, boolean.class))
    return new net.sf.freecol.common.model.Ability((java.lang.String)params[0], (boolean)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Game", new Introspector.Impl<>(net.sf.freecol.common.model.Game.class) {
net.sf.freecol.common.model.Game newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Game((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.Game();
  throw new IllegalArgumentException();
}
});
names.put("common.model.Colony", new Introspector.Impl<>(net.sf.freecol.common.model.Colony.class) {
net.sf.freecol.common.model.Colony newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Colony((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.UnitType", new Introspector.Impl<>(net.sf.freecol.common.model.UnitType.class) {
net.sf.freecol.common.model.UnitType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.TradeRoute", new Introspector.Impl<>(net.sf.freecol.common.model.TradeRoute.class) {
net.sf.freecol.common.model.TradeRoute newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.TradeRoute((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.TradeRoute((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1], (net.sf.freecol.common.model.Player)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Event", new Introspector.Impl<>(net.sf.freecol.common.model.Event.class) {
net.sf.freecol.common.model.Event newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Event((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Event((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Force", new Introspector.Impl<>(net.sf.freecol.common.model.Force.class) {
net.sf.freecol.common.model.Force newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Force((net.sf.freecol.common.model.Specification)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class, java.util.List.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Force((net.sf.freecol.common.model.Specification)params[0], (java.util.List)params[1], (java.lang.String)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.GoodsType", new Introspector.Impl<>(net.sf.freecol.common.model.GoodsType.class) {
net.sf.freecol.common.model.GoodsType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.GoodsType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.LastSale", new Introspector.Impl<>(net.sf.freecol.common.model.LastSale.class) {
net.sf.freecol.common.model.LastSale newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.LastSale((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Turn.class, int.class))
    return new net.sf.freecol.common.model.LastSale((java.lang.String)params[0], (net.sf.freecol.common.model.Turn)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, net.sf.freecol.common.model.Turn.class, int.class))
    return new net.sf.freecol.common.model.LastSale((net.sf.freecol.common.model.Location)params[0], (net.sf.freecol.common.model.GoodsType)params[1], (net.sf.freecol.common.model.Turn)params[2], (int)params[3]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.LastSale();
  throw new IllegalArgumentException();
}
});
names.put("common.model.GoodsContainer", new Introspector.Impl<>(net.sf.freecol.common.model.GoodsContainer.class) {
net.sf.freecol.common.model.GoodsContainer newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.model.GoodsContainer((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.GoodsContainer((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.ExportData", new Introspector.Impl<>(net.sf.freecol.common.model.ExportData.class) {
net.sf.freecol.common.model.ExportData newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.model.ExportData();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.ExportData((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.ExportData((net.sf.freecol.common.model.GoodsType)params[0], (int)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.NationOptions", new Introspector.Impl<>(net.sf.freecol.common.model.NationOptions.class) {
net.sf.freecol.common.model.NationOptions newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.NationOptions((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.NationOptions((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.BuildableType", new Introspector.Impl<>(net.sf.freecol.common.model.BuildableType.class) {
});
names.put("common.model.StringTemplate", new Introspector.Impl<>(net.sf.freecol.common.model.StringTemplate.class) {
net.sf.freecol.common.model.StringTemplate newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.StringTemplate((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (types.length == 0)
    return new net.sf.freecol.common.model.StringTemplate();
  throw new IllegalArgumentException();
}
});
names.put("common.model.Effect", new Introspector.Impl<>(net.sf.freecol.common.model.Effect.class) {
net.sf.freecol.common.model.Effect newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Effect.class))
    return new net.sf.freecol.common.model.Effect((net.sf.freecol.common.model.Effect)params[0]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Effect((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.Player", new Introspector.Impl<>(net.sf.freecol.common.model.Player.class) {
net.sf.freecol.common.model.Player newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Player((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.BuildingType", new Introspector.Impl<>(net.sf.freecol.common.model.BuildingType.class) {
net.sf.freecol.common.model.BuildingType newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.BuildingType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.NationType", new Introspector.Impl<>(net.sf.freecol.common.model.NationType.class) {
});
names.put("common.model.TileImprovement", new Introspector.Impl<>(net.sf.freecol.common.model.TileImprovement.class) {
net.sf.freecol.common.model.TileImprovement newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.TileImprovementType.class, net.sf.freecol.common.model.TileImprovementStyle.class))
    return new net.sf.freecol.common.model.TileImprovement((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.TileImprovementType)params[2], (net.sf.freecol.common.model.TileImprovementStyle)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.TileImprovement((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.FreeColObject", new Introspector.Impl<>(net.sf.freecol.common.model.FreeColObject.class) {
});
names.put("common.model.HighSeas", new Introspector.Impl<>(net.sf.freecol.common.model.HighSeas.class) {
net.sf.freecol.common.model.HighSeas newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.HighSeas((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.model.HighSeas((net.sf.freecol.common.model.Game)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("common.model.NationSummary", new Introspector.Impl<>(net.sf.freecol.common.model.NationSummary.class) {
net.sf.freecol.common.model.NationSummary newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (types.length == 0)
    return new net.sf.freecol.common.model.NationSummary();
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.NationSummary((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Player)params[0]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerGame", new Introspector.Impl<>(net.sf.freecol.server.model.ServerGame.class) {
net.sf.freecol.server.model.ServerGame newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Specification.class, java.util.Random.class))
    return new net.sf.freecol.server.model.ServerGame((net.sf.freecol.common.model.Specification)params[0], (java.util.Random)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.server.model.ServerGame((net.sf.freecol.common.model.Specification)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.model.ServerGame((net.sf.freecol.common.model.Specification)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerEurope", new Introspector.Impl<>(net.sf.freecol.server.model.ServerEurope.class) {
net.sf.freecol.server.model.ServerEurope newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.model.ServerEurope((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerEurope((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerColonyTile", new Introspector.Impl<>(net.sf.freecol.server.model.ServerColonyTile.class) {
net.sf.freecol.server.model.ServerColonyTile newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.server.model.ServerColonyTile((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.Tile)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerColonyTile((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerRegion", new Introspector.Impl<>(net.sf.freecol.server.model.ServerRegion.class) {
net.sf.freecol.server.model.ServerRegion newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerRegion((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Region.RegionType.class))
    return new net.sf.freecol.server.model.ServerRegion((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Region.RegionType)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Region.class))
    return new net.sf.freecol.server.model.ServerRegion((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Region)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerColony", new Introspector.Impl<>(net.sf.freecol.server.model.ServerColony.class) {
net.sf.freecol.server.model.ServerColony newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, java.lang.String.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.server.model.ServerColony((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (java.lang.String)params[2], (net.sf.freecol.common.model.Tile)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerColony((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerBuilding", new Introspector.Impl<>(net.sf.freecol.server.model.ServerBuilding.class) {
net.sf.freecol.server.model.ServerBuilding newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.BuildingType.class))
    return new net.sf.freecol.server.model.ServerBuilding((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.BuildingType)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerBuilding((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerUnit", new Introspector.Impl<>(net.sf.freecol.server.model.ServerUnit.class) {
net.sf.freecol.server.model.ServerUnit newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.UnitType.class, net.sf.freecol.common.model.Role.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.UnitType)params[3], (net.sf.freecol.common.model.Role)params[4]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.UnitType.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.UnitType)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.Unit)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerPlayer", new Introspector.Impl<>(net.sf.freecol.server.model.ServerPlayer.class) {
net.sf.freecol.server.model.ServerPlayer newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.networking.Connection.class))
    return new net.sf.freecol.server.model.ServerPlayer((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.networking.Connection)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerPlayer((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, boolean.class, net.sf.freecol.common.model.Nation.class))
    return new net.sf.freecol.server.model.ServerPlayer((net.sf.freecol.common.model.Game)params[0], (boolean)params[1], (net.sf.freecol.common.model.Nation)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("server.model.ServerIndianSettlement", new Introspector.Impl<>(net.sf.freecol.server.model.ServerIndianSettlement.class) {
net.sf.freecol.server.model.ServerIndianSettlement newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, java.lang.String.class, net.sf.freecol.common.model.Tile.class, boolean.class, net.sf.freecol.common.model.UnitType.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.server.model.ServerIndianSettlement((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (java.lang.String)params[2], (net.sf.freecol.common.model.Tile)params[3], (boolean)params[4], (net.sf.freecol.common.model.UnitType)params[5], (net.sf.freecol.common.model.Unit)params[6]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerIndianSettlement((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.IndianSettlement.class))
    return new net.sf.freecol.server.model.ServerIndianSettlement((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Tile)params[2], (net.sf.freecol.common.model.IndianSettlement)params[3]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.EuropeanAIPlayer", new Introspector.Impl<>(net.sf.freecol.server.ai.EuropeanAIPlayer.class) {
net.sf.freecol.server.ai.EuropeanAIPlayer newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.EuropeanAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.ai.EuropeanAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.AIGoods", new Introspector.Impl<>(net.sf.freecol.server.ai.AIGoods.class) {
net.sf.freecol.server.ai.AIGoods newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIGoods((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, int.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.server.ai.AIGoods((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.GoodsType)params[2], (int)params[3], (net.sf.freecol.common.model.Location)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.AIGoods((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.MissionAIPlayer", new Introspector.Impl<>(net.sf.freecol.server.ai.MissionAIPlayer.class) {
});
names.put("server.ai.GoodsWish", new Introspector.Impl<>(net.sf.freecol.server.ai.GoodsWish.class) {
net.sf.freecol.server.ai.GoodsWish newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.GoodsWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Location.class, int.class, int.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.server.ai.GoodsWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Location)params[1], (int)params[2], (int)params[2], (net.sf.freecol.common.model.GoodsType)params[4]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.GoodsWish((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.AIMain", new Introspector.Impl<>(net.sf.freecol.server.ai.AIMain.class) {
net.sf.freecol.server.ai.AIMain newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.FreeColServer.class))
    return new net.sf.freecol.server.ai.AIMain((net.sf.freecol.server.FreeColServer)params[0]);
  if (areSame(types, net.sf.freecol.server.FreeColServer.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIMain((net.sf.freecol.server.FreeColServer)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.TileImprovementPlan", new Introspector.Impl<>(net.sf.freecol.server.ai.TileImprovementPlan.class) {
net.sf.freecol.server.ai.TileImprovementPlan newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.TileImprovementPlan((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.TileImprovementType.class, int.class))
    return new net.sf.freecol.server.ai.TileImprovementPlan((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.TileImprovementType)params[2], (int)params[3]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.TileImprovementPlan((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.AIObject", new Introspector.Impl<>(net.sf.freecol.server.ai.AIObject.class) {
});
names.put("server.ai.AIColony", new Introspector.Impl<>(net.sf.freecol.server.ai.AIColony.class) {
net.sf.freecol.server.ai.AIColony newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIColony((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.server.ai.AIColony((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Colony)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.AIColony((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.AIUnit", new Introspector.Impl<>(net.sf.freecol.server.ai.AIUnit.class) {
net.sf.freecol.server.ai.AIUnit newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIUnit((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.server.ai.AIUnit((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.AIUnit((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.ValuedAIObject", new Introspector.Impl<>(net.sf.freecol.server.ai.ValuedAIObject.class) {
});
names.put("server.ai.Wish", new Introspector.Impl<>(net.sf.freecol.server.ai.Wish.class) {
});
names.put("server.ai.REFAIPlayer", new Introspector.Impl<>(net.sf.freecol.server.ai.REFAIPlayer.class) {
net.sf.freecol.server.ai.REFAIPlayer newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.REFAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.ai.REFAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.WorkLocationPlan", new Introspector.Impl<>(net.sf.freecol.server.ai.WorkLocationPlan.class) {
net.sf.freecol.server.ai.WorkLocationPlan newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.WorkLocation.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.server.ai.WorkLocationPlan((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.WorkLocation)params[1], (net.sf.freecol.common.model.GoodsType)params[2]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.AIPlayer", new Introspector.Impl<>(net.sf.freecol.server.ai.AIPlayer.class) {
});
names.put("server.ai.TransportableAIObject", new Introspector.Impl<>(net.sf.freecol.server.ai.TransportableAIObject.class) {
});
names.put("server.ai.NativeAIPlayer", new Introspector.Impl<>(net.sf.freecol.server.ai.NativeAIPlayer.class) {
net.sf.freecol.server.ai.NativeAIPlayer newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.NativeAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.ai.NativeAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
}
});
names.put("server.ai.WorkerWish", new Introspector.Impl<>(net.sf.freecol.server.ai.WorkerWish.class) {
net.sf.freecol.server.ai.WorkerWish newInstance(Class<?>[] types, Object[] params) throws Exception {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.WorkerWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Location.class, int.class, net.sf.freecol.common.model.UnitType.class, boolean.class))
    return new net.sf.freecol.server.ai.WorkerWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Location)params[1], (int)params[2], (net.sf.freecol.common.model.UnitType)params[3], (boolean)params[4]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.WorkerWish((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
}
});
}
}
