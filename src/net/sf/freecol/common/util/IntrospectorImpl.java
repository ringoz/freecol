// generated by Introspector::main
package net.sf.freecol.common.util;
import net.sf.freecol.common.util.Introspector.Factory;
import static net.sf.freecol.common.util.Introspector.areSame;
class IntrospectorImpl {
static final java.util.Map<String,Class<?>> names = new java.util.HashMap<>();
static final java.util.Map<Class<?>,Factory> ctors = new java.util.HashMap<>();
static {
names.put("common.networking.Message$MessagePriority", net.sf.freecol.common.networking.Message.MessagePriority.class);
names.put("common.networking.Message", net.sf.freecol.common.networking.Message.class);
names.put("common.networking.TrivialMessage", net.sf.freecol.common.networking.TrivialMessage.class);
names.put("common.networking.AttributeMessage", net.sf.freecol.common.networking.AttributeMessage.class);
ctors.put(net.sf.freecol.common.networking.AttributeMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.networking.AttributeMessage((java.lang.String)params[0]);
  if (areSame(types, java.lang.String.class, java.lang.String[].class))
    return new net.sf.freecol.common.networking.AttributeMessage((java.lang.String)params[0], (java.lang.String[])params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AbandonColonyMessage", net.sf.freecol.common.networking.AbandonColonyMessage.class);
ctors.put(net.sf.freecol.common.networking.AbandonColonyMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.AbandonColonyMessage((net.sf.freecol.common.model.Colony)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AbandonColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ObjectMessage", net.sf.freecol.common.networking.ObjectMessage.class);
names.put("common.networking.AddPlayerMessage", net.sf.freecol.common.networking.AddPlayerMessage.class);
ctors.put(net.sf.freecol.common.networking.AddPlayerMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AddPlayerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.util.List.class))
    return new net.sf.freecol.common.networking.AddPlayerMessage((net.sf.freecol.common.model.Player)params[0], (java.util.List)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AnimateAttackMessage", net.sf.freecol.common.networking.AnimateAttackMessage.class);
ctors.put(net.sf.freecol.common.networking.AnimateAttackMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AnimateAttackMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class, boolean.class, boolean.class, boolean.class))
    return new net.sf.freecol.common.networking.AnimateAttackMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[1], (boolean)params[2], (boolean)params[3], (boolean)params[4]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AnimateMoveMessage", net.sf.freecol.common.networking.AnimateMoveMessage.class);
ctors.put(net.sf.freecol.common.networking.AnimateMoveMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AnimateMoveMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.Tile.class, boolean.class))
    return new net.sf.freecol.common.networking.AnimateMoveMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.Tile)params[2], (boolean)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AskSkillMessage", net.sf.freecol.common.networking.AskSkillMessage.class);
ctors.put(net.sf.freecol.common.networking.AskSkillMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AskSkillMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.AskSkillMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AssignTeacherMessage", net.sf.freecol.common.networking.AssignTeacherMessage.class);
ctors.put(net.sf.freecol.common.networking.AssignTeacherMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AssignTeacherMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.AssignTeacherMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AssignTradeRouteMessage", net.sf.freecol.common.networking.AssignTradeRouteMessage.class);
ctors.put(net.sf.freecol.common.networking.AssignTradeRouteMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AssignTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.AssignTradeRouteMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.TradeRoute)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AttackMessage", net.sf.freecol.common.networking.AttackMessage.class);
ctors.put(net.sf.freecol.common.networking.AttackMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AttackMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.AttackMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.AttackRangedMessage", net.sf.freecol.common.networking.AttackRangedMessage.class);
ctors.put(net.sf.freecol.common.networking.AttackRangedMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.AttackRangedMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.networking.AttackRangedMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Tile)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.BuildColonyMessage", net.sf.freecol.common.networking.BuildColonyMessage.class);
ctors.put(net.sf.freecol.common.networking.BuildColonyMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.BuildColonyMessage((java.lang.String)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.BuildColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.CashInTreasureTrainMessage", net.sf.freecol.common.networking.CashInTreasureTrainMessage.class);
ctors.put(net.sf.freecol.common.networking.CashInTreasureTrainMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.CashInTreasureTrainMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.CashInTreasureTrainMessage((net.sf.freecol.common.model.Unit)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ChangeStateMessage", net.sf.freecol.common.networking.ChangeStateMessage.class);
ctors.put(net.sf.freecol.common.networking.ChangeStateMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChangeStateMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.UnitState.class))
    return new net.sf.freecol.common.networking.ChangeStateMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit.UnitState)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ChangeWorkImprovementTypeMessage", net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.class);
ctors.put(net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.TileImprovementType.class))
    return new net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.TileImprovementType)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ChangeWorkTypeMessage", net.sf.freecol.common.networking.ChangeWorkTypeMessage.class);
ctors.put(net.sf.freecol.common.networking.ChangeWorkTypeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChangeWorkTypeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.common.networking.ChangeWorkTypeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.GoodsType)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ChatMessage", net.sf.freecol.common.networking.ChatMessage.class);
ctors.put(net.sf.freecol.common.networking.ChatMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChatMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.lang.String.class, boolean.class))
    return new net.sf.freecol.common.networking.ChatMessage((net.sf.freecol.common.model.Player)params[0], (java.lang.String)params[1], (boolean)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ChooseFoundingFatherMessage", net.sf.freecol.common.networking.ChooseFoundingFatherMessage.class);
ctors.put(net.sf.freecol.common.networking.ChooseFoundingFatherMessage.class, (types, params) -> {
  if (areSame(types, java.util.List.class, net.sf.freecol.common.model.FoundingFather.class))
    return new net.sf.freecol.common.networking.ChooseFoundingFatherMessage((java.util.List)params[0], (net.sf.freecol.common.model.FoundingFather)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ChooseFoundingFatherMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ClaimLandMessage", net.sf.freecol.common.networking.ClaimLandMessage.class);
ctors.put(net.sf.freecol.common.networking.ClaimLandMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ClaimLandMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.FreeColGameObject.class, int.class))
    return new net.sf.freecol.common.networking.ClaimLandMessage((net.sf.freecol.common.model.Tile)params[0], (net.sf.freecol.common.model.FreeColGameObject)params[1], (int)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ClearSpecialityMessage", net.sf.freecol.common.networking.ClearSpecialityMessage.class);
ctors.put(net.sf.freecol.common.networking.ClearSpecialityMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ClearSpecialityMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.ClearSpecialityMessage((net.sf.freecol.common.model.Unit)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.CloseMessage", net.sf.freecol.common.networking.CloseMessage.class);
ctors.put(net.sf.freecol.common.networking.CloseMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.networking.CloseMessage((java.lang.String)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.CloseMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ConnectionVerificationMessage", net.sf.freecol.common.networking.ConnectionVerificationMessage.class);
ctors.put(net.sf.freecol.common.networking.ConnectionVerificationMessage.class, (types, params) -> {
  if (areSame(types, boolean.class))
    return new net.sf.freecol.common.networking.ConnectionVerificationMessage((boolean)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ConnectionVerificationMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ContinueMessage", net.sf.freecol.common.networking.ContinueMessage.class);
ctors.put(net.sf.freecol.common.networking.ContinueMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.ContinueMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ContinueMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DeclareIndependenceMessage", net.sf.freecol.common.networking.DeclareIndependenceMessage.class);
ctors.put(net.sf.freecol.common.networking.DeclareIndependenceMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.DeclareIndependenceMessage((java.lang.String)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeclareIndependenceMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DeclineMoundsMessage", net.sf.freecol.common.networking.DeclineMoundsMessage.class);
ctors.put(net.sf.freecol.common.networking.DeclineMoundsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeclineMoundsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.DeclineMoundsMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DeleteTradeRouteMessage", net.sf.freecol.common.networking.DeleteTradeRouteMessage.class);
ctors.put(net.sf.freecol.common.networking.DeleteTradeRouteMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeleteTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.DeleteTradeRouteMessage((net.sf.freecol.common.model.TradeRoute)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DeliverGiftMessage", net.sf.freecol.common.networking.DeliverGiftMessage.class);
ctors.put(net.sf.freecol.common.networking.DeliverGiftMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DeliverGiftMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class, net.sf.freecol.common.model.Goods.class))
    return new net.sf.freecol.common.networking.DeliverGiftMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1], (net.sf.freecol.common.model.Goods)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DemandTributeMessage", net.sf.freecol.common.networking.DemandTributeMessage.class);
ctors.put(net.sf.freecol.common.networking.DemandTributeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DemandTributeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.DemandTributeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DiplomacyMessage", net.sf.freecol.common.networking.DiplomacyMessage.class);
ctors.put(net.sf.freecol.common.networking.DiplomacyMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Colony)params[0], (net.sf.freecol.common.model.Unit)params[1], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  if (areSame(types, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.FreeColGameObject)params[0], (net.sf.freecol.common.model.FreeColGameObject)params[1], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.DiplomaticTrade.class))
    return new net.sf.freecol.common.networking.DiplomacyMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[1], (net.sf.freecol.common.model.DiplomaticTrade)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DisbandUnitMessage", net.sf.freecol.common.networking.DisbandUnitMessage.class);
ctors.put(net.sf.freecol.common.networking.DisbandUnitMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DisbandUnitMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.DisbandUnitMessage((net.sf.freecol.common.model.Unit)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DisconnectMessage", net.sf.freecol.common.networking.DisconnectMessage.class);
ctors.put(net.sf.freecol.common.networking.DisconnectMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.DisconnectMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DisconnectMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.DisembarkMessage", net.sf.freecol.common.networking.DisembarkMessage.class);
ctors.put(net.sf.freecol.common.networking.DisembarkMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.DisembarkMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.DisembarkMessage((net.sf.freecol.common.model.Unit)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.EmbarkMessage", net.sf.freecol.common.networking.EmbarkMessage.class);
ctors.put(net.sf.freecol.common.networking.EmbarkMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EmbarkMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.EmbarkMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Unit)params[1], (net.sf.freecol.common.model.Direction)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.EmigrateUnitMessage", net.sf.freecol.common.networking.EmigrateUnitMessage.class);
ctors.put(net.sf.freecol.common.networking.EmigrateUnitMessage.class, (types, params) -> {
  if (areSame(types, int.class))
    return new net.sf.freecol.common.networking.EmigrateUnitMessage((int)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EmigrateUnitMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.EndTurnMessage", net.sf.freecol.common.networking.EndTurnMessage.class);
ctors.put(net.sf.freecol.common.networking.EndTurnMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.EndTurnMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EndTurnMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.EnterRevengeModeMessage", net.sf.freecol.common.networking.EnterRevengeModeMessage.class);
ctors.put(net.sf.freecol.common.networking.EnterRevengeModeMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.EnterRevengeModeMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EnterRevengeModeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.EquipForRoleMessage", net.sf.freecol.common.networking.EquipForRoleMessage.class);
ctors.put(net.sf.freecol.common.networking.EquipForRoleMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.EquipForRoleMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Role.class, int.class))
    return new net.sf.freecol.common.networking.EquipForRoleMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Role)params[1], (int)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ErrorMessage", net.sf.freecol.common.networking.ErrorMessage.class);
ctors.put(net.sf.freecol.common.networking.ErrorMessage.class, (types, params) -> {
  if (areSame(types, java.lang.Exception.class))
    return new net.sf.freecol.common.networking.ErrorMessage((java.lang.Exception)params[0]);
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.networking.ErrorMessage((java.lang.String)params[0]);
  if (areSame(types, java.lang.String.class, java.lang.Exception.class))
    return new net.sf.freecol.common.networking.ErrorMessage((java.lang.String)params[0], (java.lang.Exception)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ErrorMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.StringTemplate.class))
    return new net.sf.freecol.common.networking.ErrorMessage((net.sf.freecol.common.model.StringTemplate)params[0]);
  if (areSame(types, net.sf.freecol.common.model.StringTemplate.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.ErrorMessage((net.sf.freecol.common.model.StringTemplate)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.FeatureChangeMessage", net.sf.freecol.common.networking.FeatureChangeMessage.class);
ctors.put(net.sf.freecol.common.networking.FeatureChangeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColObject.class, boolean.class))
    return new net.sf.freecol.common.networking.FeatureChangeMessage((net.sf.freecol.common.model.FreeColGameObject)params[0], (net.sf.freecol.common.model.FreeColObject)params[1], (boolean)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.FeatureChangeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.FirstContactMessage", net.sf.freecol.common.networking.FirstContactMessage.class);
ctors.put(net.sf.freecol.common.networking.FirstContactMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.FirstContactMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.networking.FirstContactMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Tile)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.FountainOfYouthMessage", net.sf.freecol.common.networking.FountainOfYouthMessage.class);
ctors.put(net.sf.freecol.common.networking.FountainOfYouthMessage.class, (types, params) -> {
  if (areSame(types, int.class))
    return new net.sf.freecol.common.networking.FountainOfYouthMessage((int)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.FountainOfYouthMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.GameEndedMessage", net.sf.freecol.common.networking.GameEndedMessage.class);
ctors.put(net.sf.freecol.common.networking.GameEndedMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.GameEndedMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, boolean.class))
    return new net.sf.freecol.common.networking.GameEndedMessage((net.sf.freecol.common.model.Player)params[0], (boolean)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.GameStateMessage", net.sf.freecol.common.networking.GameStateMessage.class);
ctors.put(net.sf.freecol.common.networking.GameStateMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.GameStateMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.GameStateMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.FreeColServer.ServerState.class))
    return new net.sf.freecol.common.networking.GameStateMessage((net.sf.freecol.server.FreeColServer.ServerState)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.HighScoresMessage", net.sf.freecol.common.networking.HighScoresMessage.class);
ctors.put(net.sf.freecol.common.networking.HighScoresMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, java.util.List.class))
    return new net.sf.freecol.common.networking.HighScoresMessage((java.lang.String)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.HighScoresMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.InciteMessage", net.sf.freecol.common.networking.InciteMessage.class);
ctors.put(net.sf.freecol.common.networking.InciteMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.InciteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class, net.sf.freecol.common.model.Player.class, int.class))
    return new net.sf.freecol.common.networking.InciteMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1], (net.sf.freecol.common.model.Player)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.networking.IndianDemandMessage", net.sf.freecol.common.networking.IndianDemandMessage.class);
ctors.put(net.sf.freecol.common.networking.IndianDemandMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.IndianDemandMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.networking.IndianDemandMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.GoodsType)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.networking.JoinColonyMessage", net.sf.freecol.common.networking.JoinColonyMessage.class);
ctors.put(net.sf.freecol.common.networking.JoinColonyMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.JoinColonyMessage((net.sf.freecol.common.model.Colony)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.JoinColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.LearnSkillMessage", net.sf.freecol.common.networking.LearnSkillMessage.class);
ctors.put(net.sf.freecol.common.networking.LearnSkillMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LearnSkillMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.LearnSkillMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.LoadGoodsMessage", net.sf.freecol.common.networking.LoadGoodsMessage.class);
ctors.put(net.sf.freecol.common.networking.LoadGoodsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LoadGoodsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, int.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.LoadGoodsMessage((net.sf.freecol.common.model.Location)params[0], (net.sf.freecol.common.model.GoodsType)params[1], (int)params[2], (net.sf.freecol.common.model.Unit)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.networking.LoginMessage", net.sf.freecol.common.networking.LoginMessage.class);
ctors.put(net.sf.freecol.common.networking.LoginMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LoginMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, net.sf.freecol.server.FreeColServer.ServerState.class, boolean.class, boolean.class, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.networking.LoginMessage((net.sf.freecol.common.model.Player)params[0], (java.lang.String)params[1], (java.lang.String)params[2], (java.lang.String)params[3], (net.sf.freecol.server.FreeColServer.ServerState)params[4], (boolean)params[5], (boolean)params[6], (net.sf.freecol.common.model.Game)params[7]);
  throw new IllegalArgumentException();
});
names.put("common.networking.LogoutMessage", net.sf.freecol.common.networking.LogoutMessage.class);
ctors.put(net.sf.freecol.common.networking.LogoutMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LogoutMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Game.LogoutReason.class))
    return new net.sf.freecol.common.networking.LogoutMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Game.LogoutReason)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.LootCargoMessage", net.sf.freecol.common.networking.LootCargoMessage.class);
ctors.put(net.sf.freecol.common.networking.LootCargoMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.LootCargoMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, java.lang.String.class, java.util.List.class))
    return new net.sf.freecol.common.networking.LootCargoMessage((net.sf.freecol.common.model.Unit)params[0], (java.lang.String)params[1], (java.util.List)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.MissionaryMessage", net.sf.freecol.common.networking.MissionaryMessage.class);
ctors.put(net.sf.freecol.common.networking.MissionaryMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MissionaryMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class, boolean.class))
    return new net.sf.freecol.common.networking.MissionaryMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1], (boolean)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.MonarchActionMessage", net.sf.freecol.common.networking.MonarchActionMessage.class);
ctors.put(net.sf.freecol.common.networking.MonarchActionMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MonarchActionMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Monarch.MonarchAction.class, net.sf.freecol.common.model.StringTemplate.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.MonarchActionMessage((net.sf.freecol.common.model.Monarch.MonarchAction)params[0], (net.sf.freecol.common.model.StringTemplate)params[1], (java.lang.String)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.MoveMessage", net.sf.freecol.common.networking.MoveMessage.class);
ctors.put(net.sf.freecol.common.networking.MoveMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MoveMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.MoveMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.MoveToMessage", net.sf.freecol.common.networking.MoveToMessage.class);
ctors.put(net.sf.freecol.common.networking.MoveToMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MoveToMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.networking.MoveToMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Location)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.MultipleMessage", net.sf.freecol.common.networking.MultipleMessage.class);
ctors.put(net.sf.freecol.common.networking.MultipleMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.MultipleMessage();
  if (areSame(types, java.util.List.class))
    return new net.sf.freecol.common.networking.MultipleMessage((java.util.List)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.MultipleMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NationSummaryMessage", net.sf.freecol.common.networking.NationSummaryMessage.class);
ctors.put(net.sf.freecol.common.networking.NationSummaryMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NationSummaryMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.NationSummary.class))
    return new net.sf.freecol.common.networking.NationSummaryMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.NationSummary)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NativeGiftMessage", net.sf.freecol.common.networking.NativeGiftMessage.class);
ctors.put(net.sf.freecol.common.networking.NativeGiftMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NativeGiftMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.NativeGiftMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Colony)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NativeTradeMessage", net.sf.freecol.common.networking.NativeTradeMessage.class);
ctors.put(net.sf.freecol.common.networking.NativeTradeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NativeTradeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.NativeTrade.NativeTradeAction.class, net.sf.freecol.common.model.NativeTrade.class))
    return new net.sf.freecol.common.networking.NativeTradeMessage((net.sf.freecol.common.model.NativeTrade.NativeTradeAction)params[0], (net.sf.freecol.common.model.NativeTrade)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class))
    return new net.sf.freecol.common.networking.NativeTradeMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NewLandNameMessage", net.sf.freecol.common.networking.NewLandNameMessage.class);
ctors.put(net.sf.freecol.common.networking.NewLandNameMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewLandNameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.NewLandNameMessage((net.sf.freecol.common.model.Unit)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NewRegionNameMessage", net.sf.freecol.common.networking.NewRegionNameMessage.class);
ctors.put(net.sf.freecol.common.networking.NewRegionNameMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewRegionNameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Region.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.Unit.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.NewRegionNameMessage((net.sf.freecol.common.model.Region)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.Unit)params[2], (java.lang.String)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NewTradeRouteMessage", net.sf.freecol.common.networking.NewTradeRouteMessage.class);
ctors.put(net.sf.freecol.common.networking.NewTradeRouteMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.NewTradeRouteMessage((net.sf.freecol.common.model.TradeRoute)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.NewTurnMessage", net.sf.freecol.common.networking.NewTurnMessage.class);
ctors.put(net.sf.freecol.common.networking.NewTurnMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.NewTurnMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Turn.class))
    return new net.sf.freecol.common.networking.NewTurnMessage((net.sf.freecol.common.model.Turn)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.PartialMessage", net.sf.freecol.common.networking.PartialMessage.class);
ctors.put(net.sf.freecol.common.networking.PartialMessage.class, (types, params) -> {
  if (areSame(types, java.util.Map.class))
    return new net.sf.freecol.common.networking.PartialMessage((java.util.Map)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PartialMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.PayArrearsMessage", net.sf.freecol.common.networking.PayArrearsMessage.class);
ctors.put(net.sf.freecol.common.networking.PayArrearsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PayArrearsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.common.networking.PayArrearsMessage((net.sf.freecol.common.model.GoodsType)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.PayForBuildingMessage", net.sf.freecol.common.networking.PayForBuildingMessage.class);
ctors.put(net.sf.freecol.common.networking.PayForBuildingMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.PayForBuildingMessage((net.sf.freecol.common.model.Colony)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PayForBuildingMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.PutOutsideColonyMessage", net.sf.freecol.common.networking.PutOutsideColonyMessage.class);
ctors.put(net.sf.freecol.common.networking.PutOutsideColonyMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.PutOutsideColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.PutOutsideColonyMessage((net.sf.freecol.common.model.Unit)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.WrapperMessage", net.sf.freecol.common.networking.WrapperMessage.class);
names.put("common.networking.QuestionMessage", net.sf.freecol.common.networking.QuestionMessage.class);
ctors.put(net.sf.freecol.common.networking.QuestionMessage.class, (types, params) -> {
  if (areSame(types, int.class, net.sf.freecol.common.networking.Message.class))
    return new net.sf.freecol.common.networking.QuestionMessage((int)params[0], (net.sf.freecol.common.networking.Message)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.QuestionMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ReadyMessage", net.sf.freecol.common.networking.ReadyMessage.class);
ctors.put(net.sf.freecol.common.networking.ReadyMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ReadyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, boolean.class))
    return new net.sf.freecol.common.networking.ReadyMessage((net.sf.freecol.common.model.Player)params[0], (boolean)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RearrangeColonyMessage", net.sf.freecol.common.networking.RearrangeColonyMessage.class);
ctors.put(net.sf.freecol.common.networking.RearrangeColonyMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, java.util.List.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.networking.RearrangeColonyMessage((net.sf.freecol.common.model.Colony)params[0], (java.util.List)params[1], (net.sf.freecol.common.model.Colony)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RearrangeColonyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ReconnectMessage", net.sf.freecol.common.networking.ReconnectMessage.class);
ctors.put(net.sf.freecol.common.networking.ReconnectMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.ReconnectMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ReconnectMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ServerInfoMessage", net.sf.freecol.common.networking.ServerInfoMessage.class);
ctors.put(net.sf.freecol.common.networking.ServerInfoMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ServerInfoMessage((java.lang.String)params[0], (net.sf.freecol.common.model.Game)params[1], (net.sf.freecol.common.io.FreeColXMLReader)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RegisterServerMessage", net.sf.freecol.common.networking.RegisterServerMessage.class);
ctors.put(net.sf.freecol.common.networking.RegisterServerMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.metaserver.ServerInfo.class))
    return new net.sf.freecol.common.networking.RegisterServerMessage((net.sf.freecol.common.metaserver.ServerInfo)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RegisterServerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RemoveMessage", net.sf.freecol.common.networking.RemoveMessage.class);
ctors.put(net.sf.freecol.common.networking.RemoveMessage.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, java.util.List.class))
    return new net.sf.freecol.common.networking.RemoveMessage((java.lang.String)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RemoveMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RemoveServerMessage", net.sf.freecol.common.networking.RemoveServerMessage.class);
ctors.put(net.sf.freecol.common.networking.RemoveServerMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.metaserver.ServerInfo.class))
    return new net.sf.freecol.common.networking.RemoveServerMessage((net.sf.freecol.common.metaserver.ServerInfo)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RemoveServerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RenameMessage", net.sf.freecol.common.networking.RenameMessage.class);
ctors.put(net.sf.freecol.common.networking.RenameMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.FreeColGameObject.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.RenameMessage((net.sf.freecol.common.model.FreeColGameObject)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RenameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ReplyMessage", net.sf.freecol.common.networking.ReplyMessage.class);
ctors.put(net.sf.freecol.common.networking.ReplyMessage.class, (types, params) -> {
  if (areSame(types, int.class, net.sf.freecol.common.networking.Message.class))
    return new net.sf.freecol.common.networking.ReplyMessage((int)params[0], (net.sf.freecol.common.networking.Message)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ReplyMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RequestLaunchMessage", net.sf.freecol.common.networking.RequestLaunchMessage.class);
ctors.put(net.sf.freecol.common.networking.RequestLaunchMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.RequestLaunchMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RequestLaunchMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.RetireMessage", net.sf.freecol.common.networking.RetireMessage.class);
ctors.put(net.sf.freecol.common.networking.RetireMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.RetireMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.RetireMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ScoutIndianSettlementMessage", net.sf.freecol.common.networking.ScoutIndianSettlementMessage.class);
ctors.put(net.sf.freecol.common.networking.ScoutIndianSettlementMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ScoutIndianSettlementMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Direction.class))
    return new net.sf.freecol.common.networking.ScoutIndianSettlementMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Direction)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ScoutSpeakToChiefMessage", net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.class);
ctors.put(net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ScoutSpeakToChiefMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class, java.lang.String.class))
    return new net.sf.freecol.common.networking.ScoutSpeakToChiefMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1], (java.lang.String)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.ServerListMessage", net.sf.freecol.common.networking.ServerListMessage.class);
ctors.put(net.sf.freecol.common.networking.ServerListMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.ServerListMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.ServerListMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetAIMessage", net.sf.freecol.common.networking.SetAIMessage.class);
ctors.put(net.sf.freecol.common.networking.SetAIMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetAIMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, boolean.class))
    return new net.sf.freecol.common.networking.SetAIMessage((net.sf.freecol.common.model.Player)params[0], (boolean)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetAvailableMessage", net.sf.freecol.common.networking.SetAvailableMessage.class);
ctors.put(net.sf.freecol.common.networking.SetAvailableMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetAvailableMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Nation.class, net.sf.freecol.common.model.NationOptions.NationState.class))
    return new net.sf.freecol.common.networking.SetAvailableMessage((net.sf.freecol.common.model.Nation)params[0], (net.sf.freecol.common.model.NationOptions.NationState)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetBuildQueueMessage", net.sf.freecol.common.networking.SetBuildQueueMessage.class);
ctors.put(net.sf.freecol.common.networking.SetBuildQueueMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, java.util.List.class))
    return new net.sf.freecol.common.networking.SetBuildQueueMessage((net.sf.freecol.common.model.Colony)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetBuildQueueMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetColorMessage", net.sf.freecol.common.networking.SetColorMessage.class);
ctors.put(net.sf.freecol.common.networking.SetColorMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetColorMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Nation.class, java.awt.Color.class))
    return new net.sf.freecol.common.networking.SetColorMessage((net.sf.freecol.common.model.Nation)params[0], (java.awt.Color)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetCurrentPlayerMessage", net.sf.freecol.common.networking.SetCurrentPlayerMessage.class);
ctors.put(net.sf.freecol.common.networking.SetCurrentPlayerMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetCurrentPlayerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.networking.SetCurrentPlayerMessage((net.sf.freecol.common.model.Player)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetCurrentStopMessage", net.sf.freecol.common.networking.SetCurrentStopMessage.class);
ctors.put(net.sf.freecol.common.networking.SetCurrentStopMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetCurrentStopMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, int.class))
    return new net.sf.freecol.common.networking.SetCurrentStopMessage((net.sf.freecol.common.model.Unit)params[0], (int)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetDeadMessage", net.sf.freecol.common.networking.SetDeadMessage.class);
ctors.put(net.sf.freecol.common.networking.SetDeadMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetDeadMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.networking.SetDeadMessage((net.sf.freecol.common.model.Player)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetDestinationMessage", net.sf.freecol.common.networking.SetDestinationMessage.class);
ctors.put(net.sf.freecol.common.networking.SetDestinationMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetDestinationMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.networking.SetDestinationMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Location)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetGoodsLevelsMessage", net.sf.freecol.common.networking.SetGoodsLevelsMessage.class);
ctors.put(net.sf.freecol.common.networking.SetGoodsLevelsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.ExportData.class))
    return new net.sf.freecol.common.networking.SetGoodsLevelsMessage((net.sf.freecol.common.model.Colony)params[0], (net.sf.freecol.common.model.ExportData)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetGoodsLevelsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetNationMessage", net.sf.freecol.common.networking.SetNationMessage.class);
ctors.put(net.sf.freecol.common.networking.SetNationMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetNationMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Nation.class))
    return new net.sf.freecol.common.networking.SetNationMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Nation)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetNationTypeMessage", net.sf.freecol.common.networking.SetNationTypeMessage.class);
ctors.put(net.sf.freecol.common.networking.SetNationTypeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetNationTypeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.NationType.class))
    return new net.sf.freecol.common.networking.SetNationTypeMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.NationType)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SetStanceMessage", net.sf.freecol.common.networking.SetStanceMessage.class);
ctors.put(net.sf.freecol.common.networking.SetStanceMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SetStanceMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Stance.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.networking.SetStanceMessage((net.sf.freecol.common.model.Stance)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.SpySettlementMessage", net.sf.freecol.common.networking.SpySettlementMessage.class);
ctors.put(net.sf.freecol.common.networking.SpySettlementMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.SpySettlementMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.Settlement.class))
    return new net.sf.freecol.common.networking.SpySettlementMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.Settlement)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.StartGameMessage", net.sf.freecol.common.networking.StartGameMessage.class);
ctors.put(net.sf.freecol.common.networking.StartGameMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.StartGameMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.StartGameMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.TrainUnitInEuropeMessage", net.sf.freecol.common.networking.TrainUnitInEuropeMessage.class);
ctors.put(net.sf.freecol.common.networking.TrainUnitInEuropeMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.TrainUnitInEuropeMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.UnitType.class))
    return new net.sf.freecol.common.networking.TrainUnitInEuropeMessage((net.sf.freecol.common.model.UnitType)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.UnloadGoodsMessage", net.sf.freecol.common.networking.UnloadGoodsMessage.class);
ctors.put(net.sf.freecol.common.networking.UnloadGoodsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UnloadGoodsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, int.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.networking.UnloadGoodsMessage((net.sf.freecol.common.model.GoodsType)params[0], (int)params[1], (net.sf.freecol.common.model.Unit)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.networking.UpdateGameOptionsMessage", net.sf.freecol.common.networking.UpdateGameOptionsMessage.class);
ctors.put(net.sf.freecol.common.networking.UpdateGameOptionsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateGameOptionsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.option.OptionGroup.class))
    return new net.sf.freecol.common.networking.UpdateGameOptionsMessage((net.sf.freecol.common.option.OptionGroup)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.UpdateMapGeneratorOptionsMessage", net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.class);
ctors.put(net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.option.OptionGroup.class))
    return new net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage((net.sf.freecol.common.option.OptionGroup)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.UpdateMessage", net.sf.freecol.common.networking.UpdateMessage.class);
ctors.put(net.sf.freecol.common.networking.UpdateMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, java.util.List.class))
    return new net.sf.freecol.common.networking.UpdateMessage((net.sf.freecol.common.model.Player)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.FreeColGameObject.class))
    return new net.sf.freecol.common.networking.UpdateMessage((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.FreeColGameObject)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.UpdateServerMessage", net.sf.freecol.common.networking.UpdateServerMessage.class);
ctors.put(net.sf.freecol.common.networking.UpdateServerMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.metaserver.ServerInfo.class))
    return new net.sf.freecol.common.networking.UpdateServerMessage((net.sf.freecol.common.metaserver.ServerInfo)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateServerMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.UpdateTradeRouteMessage", net.sf.freecol.common.networking.UpdateTradeRouteMessage.class);
ctors.put(net.sf.freecol.common.networking.UpdateTradeRouteMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.UpdateTradeRouteMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.TradeRoute.class))
    return new net.sf.freecol.common.networking.UpdateTradeRouteMessage((net.sf.freecol.common.model.TradeRoute)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.networking.VacantPlayersMessage", net.sf.freecol.common.networking.VacantPlayersMessage.class);
ctors.put(net.sf.freecol.common.networking.VacantPlayersMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.networking.VacantPlayersMessage();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.VacantPlayersMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.networking.WorkMessage", net.sf.freecol.common.networking.WorkMessage.class);
ctors.put(net.sf.freecol.common.networking.WorkMessage.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.networking.WorkMessage((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.WorkLocation.class))
    return new net.sf.freecol.common.networking.WorkMessage((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.WorkLocation)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.FreeColObject", net.sf.freecol.common.model.FreeColObject.class);
names.put("common.model.FreeColSpecObject", net.sf.freecol.common.model.FreeColSpecObject.class);
names.put("common.model.Feature", net.sf.freecol.common.model.Feature.class);
names.put("common.model.Ability", net.sf.freecol.common.model.Ability.class);
ctors.put(net.sf.freecol.common.model.Ability.class, (types, params) -> {
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.model.Ability((java.lang.String)params[0]);
  if (areSame(types, java.lang.String.class, boolean.class))
    return new net.sf.freecol.common.model.Ability((java.lang.String)params[0], (boolean)params[1]);
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.FreeColSpecObjectType.class, boolean.class))
    return new net.sf.freecol.common.model.Ability((java.lang.String)params[0], (net.sf.freecol.common.model.FreeColSpecObjectType)params[1], (boolean)params[2]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Ability((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Ability.class))
    return new net.sf.freecol.common.model.Ability((net.sf.freecol.common.model.Ability)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Ability((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.AbstractGoods", net.sf.freecol.common.model.AbstractGoods.class);
ctors.put(net.sf.freecol.common.model.AbstractGoods.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.AbstractGoods();
  if (areSame(types, net.sf.freecol.common.model.AbstractGoods.class))
    return new net.sf.freecol.common.model.AbstractGoods((net.sf.freecol.common.model.AbstractGoods)params[0]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.AbstractGoods((net.sf.freecol.common.model.GoodsType)params[0], (int)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.AbstractUnit", net.sf.freecol.common.model.AbstractUnit.class);
ctors.put(net.sf.freecol.common.model.AbstractUnit.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.AbstractUnit();
  if (areSame(types, java.lang.String.class, java.lang.String.class, int.class))
    return new net.sf.freecol.common.model.AbstractUnit((java.lang.String)params[0], (java.lang.String)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.AbstractUnit((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.UnitType.class, java.lang.String.class, int.class))
    return new net.sf.freecol.common.model.AbstractUnit((net.sf.freecol.common.model.UnitType)params[0], (java.lang.String)params[1], (int)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.model.FreeColSpecObjectType", net.sf.freecol.common.model.FreeColSpecObjectType.class);
names.put("common.model.BuildableType", net.sf.freecol.common.model.BuildableType.class);
names.put("common.model.FreeColGameObject", net.sf.freecol.common.model.FreeColGameObject.class);
names.put("common.model.UnitLocation$NoAddReason", net.sf.freecol.common.model.UnitLocation.NoAddReason.class);
names.put("common.model.UnitLocation", net.sf.freecol.common.model.UnitLocation.class);
names.put("common.model.WorkLocation", net.sf.freecol.common.model.WorkLocation.class);
names.put("common.model.Building", net.sf.freecol.common.model.Building.class);
ctors.put(net.sf.freecol.common.model.Building.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Building((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.BuildingType", net.sf.freecol.common.model.BuildingType.class);
ctors.put(net.sf.freecol.common.model.BuildingType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.BuildingType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.GoodsLocation", net.sf.freecol.common.model.GoodsLocation.class);
names.put("common.model.Settlement", net.sf.freecol.common.model.Settlement.class);
names.put("common.model.Colony$ColonyChangeEvent", net.sf.freecol.common.model.Colony.ColonyChangeEvent.class);
names.put("common.model.Colony$NoBuildReason", net.sf.freecol.common.model.Colony.NoBuildReason.class);
names.put("common.model.Colony", net.sf.freecol.common.model.Colony.class);
ctors.put(net.sf.freecol.common.model.Colony.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Colony((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.ColonyTile", net.sf.freecol.common.model.ColonyTile.class);
ctors.put(net.sf.freecol.common.model.ColonyTile.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.ColonyTile((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.TradeItem", net.sf.freecol.common.model.TradeItem.class);
names.put("common.model.ColonyTradeItem", net.sf.freecol.common.model.ColonyTradeItem.class);
ctors.put(net.sf.freecol.common.model.ColonyTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.ColonyTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.common.model.ColonyTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Colony)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.DiplomaticTrade$TradeContext", net.sf.freecol.common.model.DiplomaticTrade.TradeContext.class);
names.put("common.model.DiplomaticTrade$TradeStatus", net.sf.freecol.common.model.DiplomaticTrade.TradeStatus.class);
names.put("common.model.DiplomaticTrade", net.sf.freecol.common.model.DiplomaticTrade.class);
ctors.put(net.sf.freecol.common.model.DiplomaticTrade.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.DiplomaticTrade((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.DiplomaticTrade.TradeContext.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, java.util.List.class, int.class))
    return new net.sf.freecol.common.model.DiplomaticTrade((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.DiplomaticTrade.TradeContext)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Player)params[3], (java.util.List)params[4], (int)params[5]);
  throw new IllegalArgumentException();
});
names.put("common.model.Disaster$Effects", net.sf.freecol.common.model.Disaster.Effects.class);
names.put("common.model.Disaster", net.sf.freecol.common.model.Disaster.class);
ctors.put(net.sf.freecol.common.model.Disaster.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Disaster((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Effect", net.sf.freecol.common.model.Effect.class);
ctors.put(net.sf.freecol.common.model.Effect.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Effect((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Effect.class))
    return new net.sf.freecol.common.model.Effect((net.sf.freecol.common.model.Effect)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.Europe$MigrationType", net.sf.freecol.common.model.Europe.MigrationType.class);
names.put("common.model.Europe", net.sf.freecol.common.model.Europe.class);
ctors.put(net.sf.freecol.common.model.Europe.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Europe((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.NationType$AggressionLevel", net.sf.freecol.common.model.NationType.AggressionLevel.class);
names.put("common.model.NationType$SettlementNumber", net.sf.freecol.common.model.NationType.SettlementNumber.class);
names.put("common.model.NationType", net.sf.freecol.common.model.NationType.class);
names.put("common.model.EuropeanNationType", net.sf.freecol.common.model.EuropeanNationType.class);
ctors.put(net.sf.freecol.common.model.EuropeanNationType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.EuropeanNationType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Event", net.sf.freecol.common.model.Event.class);
ctors.put(net.sf.freecol.common.model.Event.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Event((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Event((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.ExportData", net.sf.freecol.common.model.ExportData.class);
ctors.put(net.sf.freecol.common.model.ExportData.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.ExportData();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.ExportData((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.ExportData((net.sf.freecol.common.model.GoodsType)params[0], (int)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Force", net.sf.freecol.common.model.Force.class);
ctors.put(net.sf.freecol.common.model.Force.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Force((net.sf.freecol.common.model.Specification)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class, java.util.List.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Force((net.sf.freecol.common.model.Specification)params[0], (java.util.List)params[1], (java.lang.String)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.model.FoundingFather$FoundingFatherType", net.sf.freecol.common.model.FoundingFather.FoundingFatherType.class);
names.put("common.model.FoundingFather", net.sf.freecol.common.model.FoundingFather.class);
ctors.put(net.sf.freecol.common.model.FoundingFather.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.FoundingFather((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Game$LogoutReason", net.sf.freecol.common.model.Game.LogoutReason.class);
names.put("common.model.Game", net.sf.freecol.common.model.Game.class);
ctors.put(net.sf.freecol.common.model.Game.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.Game();
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Game((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.GoldTradeItem", net.sf.freecol.common.model.GoldTradeItem.class);
ctors.put(net.sf.freecol.common.model.GoldTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.GoldTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, int.class))
    return new net.sf.freecol.common.model.GoldTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.Goods", net.sf.freecol.common.model.Goods.class);
ctors.put(net.sf.freecol.common.model.Goods.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Goods((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Goods((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.Goods((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.GoodsType)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.GoodsContainer", net.sf.freecol.common.model.GoodsContainer.class);
ctors.put(net.sf.freecol.common.model.GoodsContainer.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.GoodsContainer((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.model.GoodsContainer((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.GoodsTradeItem", net.sf.freecol.common.model.GoodsTradeItem.class);
ctors.put(net.sf.freecol.common.model.GoodsTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.GoodsTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Goods.class))
    return new net.sf.freecol.common.model.GoodsTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Goods)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.GoodsType", net.sf.freecol.common.model.GoodsType.class);
ctors.put(net.sf.freecol.common.model.GoodsType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.GoodsType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.HighScore$ScoreLevel", net.sf.freecol.common.model.HighScore.ScoreLevel.class);
names.put("common.model.HighScore", net.sf.freecol.common.model.HighScore.class);
ctors.put(net.sf.freecol.common.model.HighScore.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.HighScore();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.HighScore((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.HighScore((net.sf.freecol.common.model.Player)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.HighSeas", net.sf.freecol.common.model.HighSeas.class);
ctors.put(net.sf.freecol.common.model.HighSeas.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.model.HighSeas((net.sf.freecol.common.model.Game)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.HighSeas((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.StringTemplate$TemplateType", net.sf.freecol.common.model.StringTemplate.TemplateType.class);
names.put("common.model.StringTemplate", net.sf.freecol.common.model.StringTemplate.class);
ctors.put(net.sf.freecol.common.model.StringTemplate.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.StringTemplate();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.StringTemplate((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.HistoryEvent$HistoryEventType", net.sf.freecol.common.model.HistoryEvent.HistoryEventType.class);
names.put("common.model.HistoryEvent", net.sf.freecol.common.model.HistoryEvent.class);
ctors.put(net.sf.freecol.common.model.HistoryEvent.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.HistoryEvent();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.HistoryEvent((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Turn.class, net.sf.freecol.common.model.HistoryEvent.HistoryEventType.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.HistoryEvent((net.sf.freecol.common.model.Turn)params[0], (net.sf.freecol.common.model.HistoryEvent.HistoryEventType)params[1], (net.sf.freecol.common.model.Player)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.model.InciteTradeItem", net.sf.freecol.common.model.InciteTradeItem.class);
ctors.put(net.sf.freecol.common.model.InciteTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.InciteTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.InciteTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Player)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.IndianNationType", net.sf.freecol.common.model.IndianNationType.class);
ctors.put(net.sf.freecol.common.model.IndianNationType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.IndianNationType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.IndianSettlement$ContactLevel", net.sf.freecol.common.model.IndianSettlement.ContactLevel.class);
names.put("common.model.IndianSettlement", net.sf.freecol.common.model.IndianSettlement.class);
ctors.put(net.sf.freecol.common.model.IndianSettlement.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.IndianSettlement((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.LastSale", net.sf.freecol.common.model.LastSale.class);
ctors.put(net.sf.freecol.common.model.LastSale.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.LastSale();
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Turn.class, int.class))
    return new net.sf.freecol.common.model.LastSale((java.lang.String)params[0], (net.sf.freecol.common.model.Turn)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.LastSale((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, net.sf.freecol.common.model.Turn.class, int.class))
    return new net.sf.freecol.common.model.LastSale((net.sf.freecol.common.model.Location)params[0], (net.sf.freecol.common.model.GoodsType)params[1], (net.sf.freecol.common.model.Turn)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.Limit$Operator", net.sf.freecol.common.model.Limit.Operator.class);
names.put("common.model.Limit", net.sf.freecol.common.model.Limit.class);
ctors.put(net.sf.freecol.common.model.Limit.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Operand.class, net.sf.freecol.common.model.Limit.Operator.class, net.sf.freecol.common.model.Operand.class))
    return new net.sf.freecol.common.model.Limit((java.lang.String)params[0], (net.sf.freecol.common.model.Operand)params[1], (net.sf.freecol.common.model.Limit.Operator)params[2], (net.sf.freecol.common.model.Operand)params[3]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Limit((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Limit((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.TileItem", net.sf.freecol.common.model.TileItem.class);
names.put("common.model.LostCityRumour$RumourType", net.sf.freecol.common.model.LostCityRumour.RumourType.class);
names.put("common.model.LostCityRumour", net.sf.freecol.common.model.LostCityRumour.class);
ctors.put(net.sf.freecol.common.model.LostCityRumour.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.LostCityRumour((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.model.LostCityRumour((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.LostCityRumour.RumourType.class, java.lang.String.class))
    return new net.sf.freecol.common.model.LostCityRumour((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.LostCityRumour.RumourType)params[2], (java.lang.String)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.Map$Layer", net.sf.freecol.common.model.Map.Layer.class);
names.put("common.model.Map", net.sf.freecol.common.model.Map.class);
ctors.put(net.sf.freecol.common.model.Map.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, int.class, int.class))
    return new net.sf.freecol.common.model.Map((net.sf.freecol.common.model.Game)params[0], (int)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Map((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Map((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Market$Access", net.sf.freecol.common.model.Market.Access.class);
names.put("common.model.Market", net.sf.freecol.common.model.Market.class);
ctors.put(net.sf.freecol.common.model.Market.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Market((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.Market((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.MarketData", net.sf.freecol.common.model.MarketData.class);
ctors.put(net.sf.freecol.common.model.MarketData.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.MarketData((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.common.model.MarketData((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.GoodsType)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.ModelMessage$MessageType", net.sf.freecol.common.model.ModelMessage.MessageType.class);
names.put("common.model.ModelMessage", net.sf.freecol.common.model.ModelMessage.class);
ctors.put(net.sf.freecol.common.model.ModelMessage.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.ModelMessage();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  if (areSame(types, net.sf.freecol.common.model.ModelMessage.MessageType.class, java.lang.String.class, java.lang.String.class, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColObject.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.model.ModelMessage.MessageType)params[0], (java.lang.String)params[1], (java.lang.String)params[2], (net.sf.freecol.common.model.FreeColGameObject)params[3], (net.sf.freecol.common.model.FreeColObject)params[4]);
  if (areSame(types, net.sf.freecol.common.model.ModelMessage.MessageType.class, java.lang.String.class, net.sf.freecol.common.model.FreeColGameObject.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.model.ModelMessage.MessageType)params[0], (java.lang.String)params[1], (net.sf.freecol.common.model.FreeColGameObject)params[2]);
  if (areSame(types, net.sf.freecol.common.model.ModelMessage.MessageType.class, java.lang.String.class, net.sf.freecol.common.model.FreeColGameObject.class, net.sf.freecol.common.model.FreeColObject.class))
    return new net.sf.freecol.common.model.ModelMessage((net.sf.freecol.common.model.ModelMessage.MessageType)params[0], (java.lang.String)params[1], (net.sf.freecol.common.model.FreeColGameObject)params[2], (net.sf.freecol.common.model.FreeColObject)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.Modifier$ModifierType", net.sf.freecol.common.model.Modifier.ModifierType.class);
names.put("common.model.Modifier", net.sf.freecol.common.model.Modifier.class);
ctors.put(net.sf.freecol.common.model.Modifier.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, float.class, net.sf.freecol.common.model.Modifier.ModifierType.class))
    return new net.sf.freecol.common.model.Modifier((java.lang.String)params[0], (float)params[1], (net.sf.freecol.common.model.Modifier.ModifierType)params[2]);
  if (areSame(types, java.lang.String.class, float.class, net.sf.freecol.common.model.Modifier.ModifierType.class, net.sf.freecol.common.model.FreeColObject.class))
    return new net.sf.freecol.common.model.Modifier((java.lang.String)params[0], (float)params[1], (net.sf.freecol.common.model.Modifier.ModifierType)params[2], (net.sf.freecol.common.model.FreeColObject)params[3]);
  if (areSame(types, java.lang.String.class, float.class, net.sf.freecol.common.model.Modifier.ModifierType.class, net.sf.freecol.common.model.FreeColObject.class, int.class))
    return new net.sf.freecol.common.model.Modifier((java.lang.String)params[0], (float)params[1], (net.sf.freecol.common.model.Modifier.ModifierType)params[2], (net.sf.freecol.common.model.FreeColObject)params[3], (int)params[4]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Modifier((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Modifier((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.Monarch$MonarchAction", net.sf.freecol.common.model.Monarch.MonarchAction.class);
names.put("common.model.Monarch", net.sf.freecol.common.model.Monarch.class);
ctors.put(net.sf.freecol.common.model.Monarch.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Monarch((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.Monarch((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Nation", net.sf.freecol.common.model.Nation.class);
ctors.put(net.sf.freecol.common.model.Nation.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Nation((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.NationOptions$Advantages", net.sf.freecol.common.model.NationOptions.Advantages.class);
names.put("common.model.NationOptions$NationState", net.sf.freecol.common.model.NationOptions.NationState.class);
names.put("common.model.NationOptions", net.sf.freecol.common.model.NationOptions.class);
ctors.put(net.sf.freecol.common.model.NationOptions.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.NationOptions((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.NationOptions((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.NationSummary", net.sf.freecol.common.model.NationSummary.class);
ctors.put(net.sf.freecol.common.model.NationSummary.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.NationSummary();
  if (areSame(types, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.NationSummary((net.sf.freecol.common.model.Player)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.NativeTrade$NativeTradeAction", net.sf.freecol.common.model.NativeTrade.NativeTradeAction.class);
names.put("common.model.NativeTrade", net.sf.freecol.common.model.NativeTrade.class);
ctors.put(net.sf.freecol.common.model.NativeTrade.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.NativeTrade((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Unit.class, net.sf.freecol.common.model.IndianSettlement.class))
    return new net.sf.freecol.common.model.NativeTrade((net.sf.freecol.common.model.Unit)params[0], (net.sf.freecol.common.model.IndianSettlement)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.NativeTradeItem", net.sf.freecol.common.model.NativeTradeItem.class);
ctors.put(net.sf.freecol.common.model.NativeTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.NativeTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Goods.class))
    return new net.sf.freecol.common.model.NativeTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Goods)params[3]);
  if (areSame(types, net.sf.freecol.common.model.NativeTradeItem.class))
    return new net.sf.freecol.common.model.NativeTradeItem((net.sf.freecol.common.model.NativeTradeItem)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.Scope", net.sf.freecol.common.model.Scope.class);
ctors.put(net.sf.freecol.common.model.Scope.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.Scope();
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.Scope((net.sf.freecol.common.io.FreeColXMLReader)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.Operand$OperandType", net.sf.freecol.common.model.Operand.OperandType.class);
names.put("common.model.Operand$ScopeLevel", net.sf.freecol.common.model.Operand.ScopeLevel.class);
names.put("common.model.Operand", net.sf.freecol.common.model.Operand.class);
ctors.put(net.sf.freecol.common.model.Operand.class, (types, params) -> {
  if (areSame(types))
    return new net.sf.freecol.common.model.Operand();
  if (areSame(types, int.class))
    return new net.sf.freecol.common.model.Operand((int)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Operand.OperandType.class, net.sf.freecol.common.model.Operand.ScopeLevel.class))
    return new net.sf.freecol.common.model.Operand((net.sf.freecol.common.model.Operand.OperandType)params[0], (net.sf.freecol.common.model.Operand.ScopeLevel)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Player$ColonyValueCategory", net.sf.freecol.common.model.Player.ColonyValueCategory.class);
names.put("common.model.Player$NoClaimReason", net.sf.freecol.common.model.Player.NoClaimReason.class);
names.put("common.model.Player$NoValueType", net.sf.freecol.common.model.Player.NoValueType.class);
names.put("common.model.Player$PlayerType", net.sf.freecol.common.model.Player.PlayerType.class);
names.put("common.model.Player", net.sf.freecol.common.model.Player.class);
ctors.put(net.sf.freecol.common.model.Player.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Player((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.PlunderType", net.sf.freecol.common.model.PlunderType.class);
ctors.put(net.sf.freecol.common.model.PlunderType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.PlunderType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.PlunderType((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.ProductionType", net.sf.freecol.common.model.ProductionType.class);
ctors.put(net.sf.freecol.common.model.ProductionType.class, (types, params) -> {
  if (areSame(types, java.util.List.class, java.util.List.class))
    return new net.sf.freecol.common.model.ProductionType((java.util.List)params[0], (java.util.List)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.AbstractGoods.class, boolean.class, java.lang.String.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.model.AbstractGoods)params[0], (boolean)params[1], (java.lang.String)params[2]);
  if (areSame(types, net.sf.freecol.common.model.GoodsType.class, net.sf.freecol.common.model.GoodsType.class, int.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.model.GoodsType)params[0], (net.sf.freecol.common.model.GoodsType)params[1], (int)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.ProductionType((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.Region$RegionType", net.sf.freecol.common.model.Region.RegionType.class);
names.put("common.model.Region", net.sf.freecol.common.model.Region.class);
ctors.put(net.sf.freecol.common.model.Region.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.model.Region((net.sf.freecol.common.model.Game)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Region((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Resource", net.sf.freecol.common.model.Resource.class);
ctors.put(net.sf.freecol.common.model.Resource.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Resource((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.ResourceType.class))
    return new net.sf.freecol.common.model.Resource((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.ResourceType)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.ResourceType.class, int.class))
    return new net.sf.freecol.common.model.Resource((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.ResourceType)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.ResourceType", net.sf.freecol.common.model.ResourceType.class);
ctors.put(net.sf.freecol.common.model.ResourceType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.ResourceType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Role", net.sf.freecol.common.model.Role.class);
ctors.put(net.sf.freecol.common.model.Role.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.Role((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.SettlementType", net.sf.freecol.common.model.SettlementType.class);
ctors.put(net.sf.freecol.common.model.SettlementType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.SettlementType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.SettlementType((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.Specification$Source", net.sf.freecol.common.model.Specification.Source.class);
ctors.put(net.sf.freecol.common.model.Specification.Source.class, (types, params) -> {
  if (areSame(types, java.lang.String.class))
    return new net.sf.freecol.common.model.Specification.Source((java.lang.String)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.StanceTradeItem", net.sf.freecol.common.model.StanceTradeItem.class);
ctors.put(net.sf.freecol.common.model.StanceTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.StanceTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Stance.class))
    return new net.sf.freecol.common.model.StanceTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Stance)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.Tile", net.sf.freecol.common.model.Tile.class);
ctors.put(net.sf.freecol.common.model.Tile.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Tile((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.TileType.class, int.class, int.class))
    return new net.sf.freecol.common.model.Tile((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.TileType)params[1], (int)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.TileImprovement", net.sf.freecol.common.model.TileImprovement.class);
ctors.put(net.sf.freecol.common.model.TileImprovement.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.TileImprovement((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.TileImprovementType.class, net.sf.freecol.common.model.TileImprovementStyle.class))
    return new net.sf.freecol.common.model.TileImprovement((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.TileImprovementType)params[2], (net.sf.freecol.common.model.TileImprovementStyle)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.TileImprovementType", net.sf.freecol.common.model.TileImprovementType.class);
ctors.put(net.sf.freecol.common.model.TileImprovementType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileImprovementType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.TileItemContainer", net.sf.freecol.common.model.TileItemContainer.class);
ctors.put(net.sf.freecol.common.model.TileItemContainer.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.TileItemContainer((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.common.model.TileItemContainer((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Tile)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.TileType$RangeType", net.sf.freecol.common.model.TileType.RangeType.class);
names.put("common.model.TileType", net.sf.freecol.common.model.TileType.class);
ctors.put(net.sf.freecol.common.model.TileType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.TileTypeChange", net.sf.freecol.common.model.TileTypeChange.class);
ctors.put(net.sf.freecol.common.model.TileTypeChange.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileTypeChange((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.TileTypeChange((net.sf.freecol.common.model.Specification)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.TradeRoute", net.sf.freecol.common.model.TradeRoute.class);
ctors.put(net.sf.freecol.common.model.TradeRoute.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.TradeRoute((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.common.model.TradeRoute((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1], (net.sf.freecol.common.model.Player)params[2]);
  throw new IllegalArgumentException();
});
names.put("common.model.TradeRouteStop", net.sf.freecol.common.model.TradeRouteStop.class);
ctors.put(net.sf.freecol.common.model.TradeRouteStop.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.Game)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1]);
  if (areSame(types, net.sf.freecol.common.model.TradeRouteStop.class))
    return new net.sf.freecol.common.model.TradeRouteStop((net.sf.freecol.common.model.TradeRouteStop)params[0]);
  throw new IllegalArgumentException();
});
names.put("common.model.Unit$MoveType", net.sf.freecol.common.model.Unit.MoveType.class);
names.put("common.model.Unit$UnitLabelType", net.sf.freecol.common.model.Unit.UnitLabelType.class);
names.put("common.model.Unit$UnitState", net.sf.freecol.common.model.Unit.UnitState.class);
names.put("common.model.Unit", net.sf.freecol.common.model.Unit.class);
ctors.put(net.sf.freecol.common.model.Unit.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.common.model.Unit((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.UnitChangeType", net.sf.freecol.common.model.UnitChangeType.class);
ctors.put(net.sf.freecol.common.model.UnitChangeType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitChangeType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.UnitTradeItem", net.sf.freecol.common.model.UnitTradeItem.class);
ctors.put(net.sf.freecol.common.model.UnitTradeItem.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.common.model.UnitTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.common.model.UnitTradeItem((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.Unit)params[3]);
  throw new IllegalArgumentException();
});
names.put("common.model.UnitType", net.sf.freecol.common.model.UnitType.class);
ctors.put(net.sf.freecol.common.model.UnitType.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitType((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.UnitTypeChange", net.sf.freecol.common.model.UnitTypeChange.class);
ctors.put(net.sf.freecol.common.model.UnitTypeChange.class, (types, params) -> {
  if (areSame(types, java.lang.String.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitTypeChange((java.lang.String)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  if (areSame(types, net.sf.freecol.common.io.FreeColXMLReader.class, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.common.model.UnitTypeChange((net.sf.freecol.common.io.FreeColXMLReader)params[0], (net.sf.freecol.common.model.Specification)params[1]);
  throw new IllegalArgumentException();
});
names.put("common.model.BuildQueue$CompletionAction", net.sf.freecol.common.model.BuildQueue.CompletionAction.class);
names.put("common.model.CombatModel$CombatEffectType", net.sf.freecol.common.model.CombatModel.CombatEffectType.class);
names.put("common.model.Constants$ArmedUnitSettlementAction", net.sf.freecol.common.model.Constants.ArmedUnitSettlementAction.class);
names.put("common.model.Constants$BoycottAction", net.sf.freecol.common.model.Constants.BoycottAction.class);
names.put("common.model.Constants$ClaimAction", net.sf.freecol.common.model.Constants.ClaimAction.class);
names.put("common.model.Constants$IndianDemandAction", net.sf.freecol.common.model.Constants.IndianDemandAction.class);
names.put("common.model.Constants$IntegrityType", net.sf.freecol.common.model.Constants.IntegrityType.class);
names.put("common.model.Constants$MissionaryAction", net.sf.freecol.common.model.Constants.MissionaryAction.class);
names.put("common.model.Constants$ScoutColonyAction", net.sf.freecol.common.model.Constants.ScoutColonyAction.class);
names.put("common.model.Constants$ScoutIndianSettlementAction", net.sf.freecol.common.model.Constants.ScoutIndianSettlementAction.class);
names.put("common.model.Constants$TradeAction", net.sf.freecol.common.model.Constants.TradeAction.class);
names.put("common.model.Constants$TradeBuyAction", net.sf.freecol.common.model.Constants.TradeBuyAction.class);
names.put("common.model.Constants$TradeSellAction", net.sf.freecol.common.model.Constants.TradeSellAction.class);
names.put("common.model.Direction", net.sf.freecol.common.model.Direction.class);
names.put("common.model.Stance", net.sf.freecol.common.model.Stance.class);
names.put("common.model.Tension$Level", net.sf.freecol.common.model.Tension.Level.class);
names.put("server.model.ServerBuilding", net.sf.freecol.server.model.ServerBuilding.class);
ctors.put(net.sf.freecol.server.model.ServerBuilding.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerBuilding((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.BuildingType.class))
    return new net.sf.freecol.server.model.ServerBuilding((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.BuildingType)params[2]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerColony", net.sf.freecol.server.model.ServerColony.class);
ctors.put(net.sf.freecol.server.model.ServerColony.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerColony((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, java.lang.String.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.server.model.ServerColony((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (java.lang.String)params[2], (net.sf.freecol.common.model.Tile)params[3]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerColonyTile", net.sf.freecol.server.model.ServerColonyTile.class);
ctors.put(net.sf.freecol.server.model.ServerColonyTile.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerColonyTile((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Colony.class, net.sf.freecol.common.model.Tile.class))
    return new net.sf.freecol.server.model.ServerColonyTile((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Colony)params[1], (net.sf.freecol.common.model.Tile)params[2]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerEurope", net.sf.freecol.server.model.ServerEurope.class);
ctors.put(net.sf.freecol.server.model.ServerEurope.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerEurope((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.model.ServerEurope((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerGame", net.sf.freecol.server.model.ServerGame.class);
ctors.put(net.sf.freecol.server.model.ServerGame.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Specification.class))
    return new net.sf.freecol.server.model.ServerGame((net.sf.freecol.common.model.Specification)params[0]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class, java.util.Random.class))
    return new net.sf.freecol.server.model.ServerGame((net.sf.freecol.common.model.Specification)params[0], (java.util.Random)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Specification.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.model.ServerGame((net.sf.freecol.common.model.Specification)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerIndianSettlement", net.sf.freecol.server.model.ServerIndianSettlement.class);
ctors.put(net.sf.freecol.server.model.ServerIndianSettlement.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerIndianSettlement((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, java.lang.String.class, net.sf.freecol.common.model.Tile.class, boolean.class, net.sf.freecol.common.model.UnitType.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.server.model.ServerIndianSettlement((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (java.lang.String)params[2], (net.sf.freecol.common.model.Tile)params[3], (boolean)params[4], (net.sf.freecol.common.model.UnitType)params[5], (net.sf.freecol.common.model.Unit)params[6]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.IndianSettlement.class))
    return new net.sf.freecol.server.model.ServerIndianSettlement((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Player)params[1], (net.sf.freecol.common.model.Tile)params[2], (net.sf.freecol.common.model.IndianSettlement)params[3]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerPlayer$DeadCheck", net.sf.freecol.server.model.ServerPlayer.DeadCheck.class);
names.put("server.model.ServerPlayer", net.sf.freecol.server.model.ServerPlayer.class);
ctors.put(net.sf.freecol.server.model.ServerPlayer.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, boolean.class, net.sf.freecol.common.model.Nation.class))
    return new net.sf.freecol.server.model.ServerPlayer((net.sf.freecol.common.model.Game)params[0], (boolean)params[1], (net.sf.freecol.common.model.Nation)params[2]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerPlayer((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.networking.Connection.class))
    return new net.sf.freecol.server.model.ServerPlayer((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.networking.Connection)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerRegion", net.sf.freecol.server.model.ServerRegion.class);
ctors.put(net.sf.freecol.server.model.ServerRegion.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerRegion((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Region.RegionType.class))
    return new net.sf.freecol.server.model.ServerRegion((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Region.RegionType)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Region.class))
    return new net.sf.freecol.server.model.ServerRegion((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Region)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.model.ServerUnit", net.sf.freecol.server.model.ServerUnit.class);
ctors.put(net.sf.freecol.server.model.ServerUnit.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.common.model.Game.class, java.lang.String.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.UnitType.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.UnitType)params[3]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.Player.class, net.sf.freecol.common.model.UnitType.class, net.sf.freecol.common.model.Role.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.Player)params[2], (net.sf.freecol.common.model.UnitType)params[3], (net.sf.freecol.common.model.Role)params[4]);
  if (areSame(types, net.sf.freecol.common.model.Game.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.server.model.ServerUnit((net.sf.freecol.common.model.Game)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.Unit)params[2]);
  throw new IllegalArgumentException();
});
names.put("server.ai.AIObject", net.sf.freecol.server.ai.AIObject.class);
names.put("server.ai.AIColony", net.sf.freecol.server.ai.AIColony.class);
ctors.put(net.sf.freecol.server.ai.AIColony.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.AIColony((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIColony((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Colony.class))
    return new net.sf.freecol.server.ai.AIColony((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Colony)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.ai.ValuedAIObject", net.sf.freecol.server.ai.ValuedAIObject.class);
names.put("server.ai.TransportableAIObject", net.sf.freecol.server.ai.TransportableAIObject.class);
names.put("server.ai.AIGoods", net.sf.freecol.server.ai.AIGoods.class);
ctors.put(net.sf.freecol.server.ai.AIGoods.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.AIGoods((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIGoods((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Location.class, net.sf.freecol.common.model.GoodsType.class, int.class, net.sf.freecol.common.model.Location.class))
    return new net.sf.freecol.server.ai.AIGoods((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Location)params[1], (net.sf.freecol.common.model.GoodsType)params[2], (int)params[3], (net.sf.freecol.common.model.Location)params[4]);
  throw new IllegalArgumentException();
});
names.put("server.ai.AIMain", net.sf.freecol.server.ai.AIMain.class);
ctors.put(net.sf.freecol.server.ai.AIMain.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.FreeColServer.class))
    return new net.sf.freecol.server.ai.AIMain((net.sf.freecol.server.FreeColServer)params[0]);
  if (areSame(types, net.sf.freecol.server.FreeColServer.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIMain((net.sf.freecol.server.FreeColServer)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.ai.AIPlayer", net.sf.freecol.server.ai.AIPlayer.class);
names.put("server.ai.AIUnit", net.sf.freecol.server.ai.AIUnit.class);
ctors.put(net.sf.freecol.server.ai.AIUnit.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.AIUnit((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.AIUnit((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Unit.class))
    return new net.sf.freecol.server.ai.AIUnit((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Unit)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.ai.MissionAIPlayer", net.sf.freecol.server.ai.MissionAIPlayer.class);
names.put("server.ai.EuropeanAIPlayer", net.sf.freecol.server.ai.EuropeanAIPlayer.class);
ctors.put(net.sf.freecol.server.ai.EuropeanAIPlayer.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.EuropeanAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.ai.EuropeanAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.ai.Wish", net.sf.freecol.server.ai.Wish.class);
names.put("server.ai.GoodsWish", net.sf.freecol.server.ai.GoodsWish.class);
ctors.put(net.sf.freecol.server.ai.GoodsWish.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.GoodsWish((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.GoodsWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Location.class, int.class, int.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.server.ai.GoodsWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Location)params[1], (int)params[2], (int)params[3], (net.sf.freecol.common.model.GoodsType)params[4]);
  throw new IllegalArgumentException();
});
names.put("server.ai.NativeAIPlayer", net.sf.freecol.server.ai.NativeAIPlayer.class);
ctors.put(net.sf.freecol.server.ai.NativeAIPlayer.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.NativeAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.ai.NativeAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.ai.REFAIPlayer", net.sf.freecol.server.ai.REFAIPlayer.class);
ctors.put(net.sf.freecol.server.ai.REFAIPlayer.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.REFAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Player.class))
    return new net.sf.freecol.server.ai.REFAIPlayer((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Player)params[1]);
  throw new IllegalArgumentException();
});
names.put("server.ai.TileImprovementPlan", net.sf.freecol.server.ai.TileImprovementPlan.class);
ctors.put(net.sf.freecol.server.ai.TileImprovementPlan.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.TileImprovementPlan((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.TileImprovementPlan((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Tile.class, net.sf.freecol.common.model.TileImprovementType.class, int.class))
    return new net.sf.freecol.server.ai.TileImprovementPlan((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Tile)params[1], (net.sf.freecol.common.model.TileImprovementType)params[2], (int)params[3]);
  throw new IllegalArgumentException();
});
names.put("server.ai.WorkerWish", net.sf.freecol.server.ai.WorkerWish.class);
ctors.put(net.sf.freecol.server.ai.WorkerWish.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, java.lang.String.class))
    return new net.sf.freecol.server.ai.WorkerWish((net.sf.freecol.server.ai.AIMain)params[0], (java.lang.String)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.io.FreeColXMLReader.class))
    return new net.sf.freecol.server.ai.WorkerWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.io.FreeColXMLReader)params[1]);
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.Location.class, int.class, net.sf.freecol.common.model.UnitType.class, boolean.class))
    return new net.sf.freecol.server.ai.WorkerWish((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.Location)params[1], (int)params[2], (net.sf.freecol.common.model.UnitType)params[3], (boolean)params[4]);
  throw new IllegalArgumentException();
});
names.put("server.ai.WorkLocationPlan", net.sf.freecol.server.ai.WorkLocationPlan.class);
ctors.put(net.sf.freecol.server.ai.WorkLocationPlan.class, (types, params) -> {
  if (areSame(types, net.sf.freecol.server.ai.AIMain.class, net.sf.freecol.common.model.WorkLocation.class, net.sf.freecol.common.model.GoodsType.class))
    return new net.sf.freecol.server.ai.WorkLocationPlan((net.sf.freecol.server.ai.AIMain)params[0], (net.sf.freecol.common.model.WorkLocation)params[1], (net.sf.freecol.common.model.GoodsType)params[2]);
  throw new IllegalArgumentException();
});
names.put("server.ai.Cargo$CargoMode", net.sf.freecol.server.ai.Cargo.CargoMode.class);
names.put("common.option.UnitTypeOption$TypeSelector", net.sf.freecol.common.option.UnitTypeOption.TypeSelector.class);
names.put("server.FreeColServer$ServerState", net.sf.freecol.server.FreeColServer.ServerState.class);
}
}
